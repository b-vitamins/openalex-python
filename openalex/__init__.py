"""PyAlex - A Python library for OpenAlex."""

from __future__ import annotations

from structlog import get_logger

# Version is managed here and in pyproject.toml
# Keep both in sync when releasing
__version__ = "0.1.0"
__author__ = "OpenAlex Python Contributors"
__license__ = "MIT"

from .config import OpenAlexConfig
from .connection import close_all_async_connections
from .entities import (
    AsyncAuthors,
    AsyncConcepts,
    AsyncFunders,
    AsyncInstitutions,
    AsyncJournals,
    AsyncKeywords,
    AsyncPeople,
    AsyncPublishers,
    AsyncSources,
    AsyncTopics,
    AsyncWorks,
    Authors,
    Concepts,
    Funders,
    Institutions,
    Journals,
    Keywords,
    People,
    Publishers,
    Sources,
    Topics,
    Works,
)
from .exceptions import (
    APIError,
    AuthenticationError,
    NetworkError,
    NotFoundError,
    OpenAlexError,
    RateLimitError,
    TimeoutError,
    ValidationError,
)
from .models import (
    APC,
    APCPrice,
    AssociatedInstitution,
    Author,
    AuthorAffiliation,
    AuthorIds,
    AutocompleteResult,
    BaseFilter,
    Biblio,
    CitationNormalizedPercentile,
    Concept,
    ConceptAncestor,
    ConceptIds,
    CountsByYear,
    DehydratedAuthor,
    DehydratedConcept,
    DehydratedEntity,
    DehydratedInstitution,
    DehydratedSource,
    DehydratedTopic,
    EntityType,
    Funder,
    FunderIds,
    Geo,
    Grant,
    GroupBy,
    GroupByResult,
    Institution,
    InstitutionIds,
    InstitutionTopic,
    InstitutionTopicShare,
    InstitutionType,
    InternationalNames,
    Keyword,
    KeywordTag,
    ListResult,
    Location,
    MeshTag,
    Meta,
    OpenAccess,
    OpenAccessStatus,
    OpenAlexBase,
    OpenAlexEntity,
    Publisher,
    PublisherIds,
    RelatedConcept,
    Repository,
    Role,
    Society,
    SortOrder,
    Source,
    SourceIds,
    SourceType,
    SummaryStats,
    SustainableDevelopmentGoal,
    Topic,
    TopicHierarchy,
    TopicIds,
    TopicLevel,
    Work,
    WorkIds,
    WorkType,
)
from .query import Query, gt_, lt_, not_, or_
from .utils import invert_abstract

logger = get_logger(__name__)

__all__ = [
    "APC",
    "APCPrice",
    "APIError",
    "AssociatedInstitution",
    "AsyncAuthors",
    "AsyncConcepts",
    "AsyncFunders",
    "AsyncInstitutions",
    "AsyncJournals",
    "AsyncKeywords",
    "AsyncPeople",
    "AsyncPublishers",
    "AsyncSources",
    "AsyncTopics",
    "AsyncWorks",
    "AuthenticationError",
    "Author",
    "AuthorAffiliation",
    "AuthorIds",
    "Authors",
    "AutocompleteResult",
    "BaseFilter",
    "Biblio",
    "CitationNormalizedPercentile",
    "Concept",
    "ConceptAncestor",
    "ConceptIds",
    "Concepts",
    "CountsByYear",
    "DehydratedAuthor",
    "DehydratedConcept",
    "DehydratedEntity",
    "DehydratedInstitution",
    "DehydratedSource",
    "DehydratedTopic",
    "EntityType",
    "Funder",
    "FunderIds",
    "Funders",
    "Geo",
    "Grant",
    "GroupBy",
    "GroupByResult",
    "Institution",
    "InstitutionIds",
    "InstitutionTopic",
    "InstitutionTopicShare",
    "InstitutionType",
    "Institutions",
    "InternationalNames",
    "Journals",
    "Keyword",
    "KeywordTag",
    "Keywords",
    "ListResult",
    "Location",
    "MeshTag",
    "Meta",
    "NetworkError",
    "NotFoundError",
    "OpenAccess",
    "OpenAccessStatus",
    "OpenAlexBase",
    "OpenAlexConfig",
    "OpenAlexEntity",
    "OpenAlexError",
    "People",
    "Publisher",
    "PublisherIds",
    "Publishers",
    "Query",
    "RateLimitError",
    "RelatedConcept",
    "Repository",
    "Role",
    "Society",
    "SortOrder",
    "Source",
    "SourceIds",
    "SourceType",
    "Sources",
    "SummaryStats",
    "SustainableDevelopmentGoal",
    "TimeoutError",
    "Topic",
    "TopicHierarchy",
    "TopicIds",
    "TopicLevel",
    "Topics",
    "ValidationError",
    "Work",
    "WorkIds",
    "WorkType",
    "Works",
    "__author__",
    "__license__",
    "__version__",
    "close_all_async_connections",
    "gt_",
    "invert_abstract",
    "lt_",
    "not_",
    "or_",
]

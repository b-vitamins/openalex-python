"""OpenAlex API
OpenAlex is a fully open catalog of the global research system. It's named after the ancient Library of Alexandria and made by the nonprofit OurResearch.  The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day.  For best performance, add your email to all API requests to join the polite pool using either: - The `mailto` query parameter (e.g., `mailto=you@example.com`) - The `User-Agent` header with mailto (e.g., `User-Agent: MyApp/1.0 (mailto:you@example.com)`)  Premium users get an API key which grants higher API limits and access to special filters.
OpenAPI spec version: 1.0.0
Generated by: https://github.com/swagger-api/swagger-codegen.git.
"""

import copy
import logging
import multiprocessing
import sys

import six
import urllib3
from six.moves import http_client as httplib


class TypeWithDefault(type):
    def __init__(cls, name, bases, dct):
        super().__init__(name, bases, dct)
        cls._default = None

    def __call__(cls):
        if cls._default is None:
            cls._default = type.__call__(cls)
        return copy.copy(cls._default)

    def set_default(cls, default):
        cls._default = copy.copy(default)


class Configuration(six.with_metaclass(TypeWithDefault, object)):
    """NOTE: This class is auto generated by the swagger code generator program.
    Ref: https://github.com/swagger-api/swagger-codegen
    Do not edit the class manually.
    """

    def __init__(self):
        """Constructor."""
        self.host = "https://api.openalex.org"
        self.temp_folder_path = None
        self.api_key = {}
        self.api_key_prefix = {}
        self.refresh_api_key_hook = None
        self.username = ""
        self.password = ""
        self.logger = {}
        self.logger["package_logger"] = logging.getLogger("swagger_client")
        self.logger["urllib3_logger"] = logging.getLogger("urllib3")
        self.logger_format = "%(asctime)s %(levelname)s %(message)s"
        self.logger_stream_handler = None
        self.logger_file_handler = None
        self.logger_file = None
        self.debug = False
        self.verify_ssl = True
        self.ssl_ca_cert = None
        self.cert_file = None
        self.key_file = None
        self.assert_hostname = None
        self.connection_pool_maxsize = multiprocessing.cpu_count() * 5
        self.proxy = None
        self.safe_chars_for_path_param = ""

    @property
    def logger_file(self):
        """The logger file.
        If the logger_file is None, then add stream handler and remove file
        handler. Otherwise, add file handler and remove stream handler.
        :param value: The logger_file path.
        :type: str.
        """
        return self.__logger_file

    @logger_file.setter
    def logger_file(self, value):
        """The logger file.
        If the logger_file is None, then add stream handler and remove file
        handler. Otherwise, add file handler and remove stream handler.
        :param value: The logger_file path.
        :type: str.
        """
        self.__logger_file = value
        if self.__logger_file:
            self.logger_file_handler = logging.FileHandler(self.__logger_file)
            self.logger_file_handler.setFormatter(self.logger_formatter)
            for _, logger in six.iteritems(self.logger):
                logger.addHandler(self.logger_file_handler)
                if self.logger_stream_handler:
                    logger.removeHandler(self.logger_stream_handler)
        else:
            self.logger_stream_handler = logging.StreamHandler()
            self.logger_stream_handler.setFormatter(self.logger_formatter)
            for _, logger in six.iteritems(self.logger):
                logger.addHandler(self.logger_stream_handler)
                if self.logger_file_handler:
                    logger.removeHandler(self.logger_file_handler)

    @property
    def debug(self):
        """Debug status
        :param value: The debug status, True or False.
        :type: bool.
        """
        return self.__debug

    @debug.setter
    def debug(self, value):
        """Debug status
        :param value: The debug status, True or False.
        :type: bool.
        """
        self.__debug = value
        if self.__debug:
            for _, logger in six.iteritems(self.logger):
                logger.setLevel(logging.DEBUG)
            httplib.HTTPConnection.debuglevel = 1
        else:
            for _, logger in six.iteritems(self.logger):
                logger.setLevel(logging.WARNING)
            httplib.HTTPConnection.debuglevel = 0

    @property
    def logger_format(self):
        """The logger format.
        The logger_formatter will be updated when sets logger_format.
        :param value: The format string.
        :type: str.
        """
        return self.__logger_format

    @logger_format.setter
    def logger_format(self, value):
        """The logger format.
        The logger_formatter will be updated when sets logger_format.
        :param value: The format string.
        :type: str.
        """
        self.__logger_format = value
        self.logger_formatter = logging.Formatter(self.__logger_format)

    def get_api_key_with_prefix(self, identifier):
        """Gets API key (with prefix if set).
        :param identifier: The identifier of apiKey.
        :return: The token for api key authentication.
        """
        if self.refresh_api_key_hook:
            self.refresh_api_key_hook(self)
        key = self.api_key.get(identifier)
        if key:
            prefix = self.api_key_prefix.get(identifier)
            if prefix:
                return f"{prefix} {key}"
            else:
                return key

    def get_basic_auth_token(self):
        """Gets HTTP basic authentication header (string).
        :return: The token for basic HTTP authentication.
        """
        token = ""
        if self.username or self.password:
            token = urllib3.util.make_headers(
                basic_auth=self.username + ":" + self.password
            ).get("authorization")
        return token

    def auth_settings(self):
        """Gets Auth Settings dict for api client.
        :return: The Auth Settings information dict.
        """
        return {}

    def to_debug_report(self):
        """Gets the essential information for debugging.
        :return: The report for debugging.
        """
        return (
            "Python SDK Debug Report:\n"
            f"OS: {sys.platform}\n"
            f"Python Version: {sys.version}\n"
            "Version of the API: 1.0.0\n"
            "SDK Package Version: 1.0.0"
        )

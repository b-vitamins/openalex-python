"""OpenAlex API
OpenAlex is a fully open catalog of the global research system. It's named after the ancient Library of Alexandria and made by the nonprofit OurResearch.  The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day.  For best performance, add your email to all API requests to join the polite pool using either: - The `mailto` query parameter (e.g., `mailto=you@example.com`) - The `User-Agent` header with mailto (e.g., `User-Agent: MyApp/1.0 (mailto:you@example.com)`)  Premium users get an API key which grants higher API limits and access to special filters.
OpenAPI spec version: 1.0.0
Generated by: https://github.com/swagger-api/swagger-codegen.git.
"""

import six
from openalex_python.api_client import ApiClient


class TextApi:
    """NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def text_concepts_get(self, title, **kwargs):
        """Get OpenAlex Concepts for text
        Get only concepts for your own text. Note: Concepts are deprecated in favor of Topics.  Query length must be between 20 and 2000 characters. Rate limited to 1 per second and 1000 requests per day.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.text_concepts_get(title, async_req=True)
        >>> result = thread.get()
        :param async_req bool
        :param str title: The title of the text to analyze (required)
        :param str abstract: The abstract of the text to analyze
        :param str user_agent: User agent with email for polite pool access. Format: AppName/Version (mailto:email@example.com)  Polite pool provides faster and more reliable API access.
        :param str mailto: Email address for polite pool access. This allows for faster and more reliable API access.  Either this or the User-Agent header with mailto should be provided.
        :return: TextConceptsResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.text_concepts_get_with_http_info(title, **kwargs)
        else:
            (data) = self.text_concepts_get_with_http_info(title, **kwargs)
            return data

    def text_concepts_get_with_http_info(self, title, **kwargs):
        """Get OpenAlex Concepts for text
        Get only concepts for your own text. Note: Concepts are deprecated in favor of Topics.  Query length must be between 20 and 2000 characters. Rate limited to 1 per second and 1000 requests per day.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.text_concepts_get_with_http_info(title, async_req=True)
        >>> result = thread.get()
        :param async_req bool
        :param str title: The title of the text to analyze (required)
        :param str abstract: The abstract of the text to analyze
        :param str user_agent: User agent with email for polite pool access. Format: AppName/Version (mailto:email@example.com)  Polite pool provides faster and more reliable API access.
        :param str mailto: Email address for polite pool access. This allows for faster and more reliable API access.  Either this or the User-Agent header with mailto should be provided.
        :return: TextConceptsResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = ["title", "abstract", "user_agent", "mailto"]
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")
        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}'"
                    " to method text_concepts_get"
                )
            params[key] = val
        del params["kwargs"]
        if "title" not in params or params["title"] is None:
            raise ValueError(
                "Missing the required parameter `title` when calling `text_concepts_get`"
            )
        collection_formats = {}
        path_params = {}
        query_params = []
        if "title" in params:
            query_params.append(("title", params["title"]))
        if "abstract" in params:
            query_params.append(("abstract", params["abstract"]))
        if "mailto" in params:
            query_params.append(("mailto", params["mailto"]))
        header_params = {}
        if "user_agent" in params:
            header_params["User-Agent"] = params["user_agent"]
        form_params = []
        local_var_files = {}
        body_params = None
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )
        auth_settings = []
        return self.api_client.call_api(
            "/text/concepts",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="TextConceptsResults",
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def text_get(self, title, **kwargs):
        """Tag text with OpenAlex aboutness assignments
        Get topics, keywords, and concepts for your own text. Accepts a title and optional abstract.  Query length must be between 20 and 2000 characters. Rate limited to 1 per second and 1000 requests per day.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.text_get(title, async_req=True)
        >>> result = thread.get()
        :param async_req bool
        :param str title: The title of the text to analyze (required)
        :param str abstract: The abstract of the text to analyze
        :param str user_agent: User agent with email for polite pool access. Format: AppName/Version (mailto:email@example.com)  Polite pool provides faster and more reliable API access.
        :param str mailto: Email address for polite pool access. This allows for faster and more reliable API access.  Either this or the User-Agent header with mailto should be provided.
        :return: TextResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.text_get_with_http_info(title, **kwargs)
        else:
            (data) = self.text_get_with_http_info(title, **kwargs)
            return data

    def text_get_with_http_info(self, title, **kwargs):
        """Tag text with OpenAlex aboutness assignments
        Get topics, keywords, and concepts for your own text. Accepts a title and optional abstract.  Query length must be between 20 and 2000 characters. Rate limited to 1 per second and 1000 requests per day.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.text_get_with_http_info(title, async_req=True)
        >>> result = thread.get()
        :param async_req bool
        :param str title: The title of the text to analyze (required)
        :param str abstract: The abstract of the text to analyze
        :param str user_agent: User agent with email for polite pool access. Format: AppName/Version (mailto:email@example.com)  Polite pool provides faster and more reliable API access.
        :param str mailto: Email address for polite pool access. This allows for faster and more reliable API access.  Either this or the User-Agent header with mailto should be provided.
        :return: TextResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = ["title", "abstract", "user_agent", "mailto"]
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")
        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method text_get"
                )
            params[key] = val
        del params["kwargs"]
        if "title" not in params or params["title"] is None:
            raise ValueError(
                "Missing the required parameter `title` when calling `text_get`"
            )
        collection_formats = {}
        path_params = {}
        query_params = []
        if "title" in params:
            query_params.append(("title", params["title"]))
        if "abstract" in params:
            query_params.append(("abstract", params["abstract"]))
        if "mailto" in params:
            query_params.append(("mailto", params["mailto"]))
        header_params = {}
        if "user_agent" in params:
            header_params["User-Agent"] = params["user_agent"]
        form_params = []
        local_var_files = {}
        body_params = None
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )
        auth_settings = []
        return self.api_client.call_api(
            "/text",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="TextResults",
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def text_keywords_get(self, title, **kwargs):
        """Get OpenAlex Keywords for text
        Get only keywords for your own text.  Query length must be between 20 and 2000 characters. Rate limited to 1 per second and 1000 requests per day.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.text_keywords_get(title, async_req=True)
        >>> result = thread.get()
        :param async_req bool
        :param str title: The title of the text to analyze (required)
        :param str abstract: The abstract of the text to analyze
        :param str user_agent: User agent with email for polite pool access. Format: AppName/Version (mailto:email@example.com)  Polite pool provides faster and more reliable API access.
        :param str mailto: Email address for polite pool access. This allows for faster and more reliable API access.  Either this or the User-Agent header with mailto should be provided.
        :return: TextKeywordsResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.text_keywords_get_with_http_info(title, **kwargs)
        else:
            (data) = self.text_keywords_get_with_http_info(title, **kwargs)
            return data

    def text_keywords_get_with_http_info(self, title, **kwargs):
        """Get OpenAlex Keywords for text
        Get only keywords for your own text.  Query length must be between 20 and 2000 characters. Rate limited to 1 per second and 1000 requests per day.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.text_keywords_get_with_http_info(title, async_req=True)
        >>> result = thread.get()
        :param async_req bool
        :param str title: The title of the text to analyze (required)
        :param str abstract: The abstract of the text to analyze
        :param str user_agent: User agent with email for polite pool access. Format: AppName/Version (mailto:email@example.com)  Polite pool provides faster and more reliable API access.
        :param str mailto: Email address for polite pool access. This allows for faster and more reliable API access.  Either this or the User-Agent header with mailto should be provided.
        :return: TextKeywordsResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = ["title", "abstract", "user_agent", "mailto"]
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")
        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}'"
                    " to method text_keywords_get"
                )
            params[key] = val
        del params["kwargs"]
        if "title" not in params or params["title"] is None:
            raise ValueError(
                "Missing the required parameter `title` when calling `text_keywords_get`"
            )
        collection_formats = {}
        path_params = {}
        query_params = []
        if "title" in params:
            query_params.append(("title", params["title"]))
        if "abstract" in params:
            query_params.append(("abstract", params["abstract"]))
        if "mailto" in params:
            query_params.append(("mailto", params["mailto"]))
        header_params = {}
        if "user_agent" in params:
            header_params["User-Agent"] = params["user_agent"]
        form_params = []
        local_var_files = {}
        body_params = None
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )
        auth_settings = []
        return self.api_client.call_api(
            "/text/keywords",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="TextKeywordsResults",
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def text_post(self, body, **kwargs):
        """Tag text with OpenAlex aboutness assignments (POST)
        Get topics, keywords, and concepts for your own text. Same as GET but accepts parameters in request body.  Query length must be between 20 and 2000 characters. Rate limited to 1 per second and 1000 requests per day.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.text_post(body, async_req=True)
        >>> result = thread.get()
        :param async_req bool
        :param TextBody body: (required)
        :return: TextResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.text_post_with_http_info(body, **kwargs)
        else:
            (data) = self.text_post_with_http_info(body, **kwargs)
            return data

    def text_post_with_http_info(self, body, **kwargs):
        """Tag text with OpenAlex aboutness assignments (POST)
        Get topics, keywords, and concepts for your own text. Same as GET but accepts parameters in request body.  Query length must be between 20 and 2000 characters. Rate limited to 1 per second and 1000 requests per day.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.text_post_with_http_info(body, async_req=True)
        >>> result = thread.get()
        :param async_req bool
        :param TextBody body: (required)
        :return: TextResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = ["body"]
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")
        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method text_post"
                )
            params[key] = val
        del params["kwargs"]
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `text_post`"
            )
        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        local_var_files = {}
        body_params = None
        if "body" in params:
            body_params = params["body"]
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )
        header_params["Content-Type"] = self.api_client.select_header_content_type(
            ["application/json"]
        )
        auth_settings = []
        return self.api_client.call_api(
            "/text",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="TextResults",
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def text_topics_get(self, title, **kwargs):
        """Get OpenAlex Topics for text
        Get only topics for your own text.  Query length must be between 20 and 2000 characters. Rate limited to 1 per second and 1000 requests per day.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.text_topics_get(title, async_req=True)
        >>> result = thread.get()
        :param async_req bool
        :param str title: The title of the text to analyze (required)
        :param str abstract: The abstract of the text to analyze
        :param str user_agent: User agent with email for polite pool access. Format: AppName/Version (mailto:email@example.com)  Polite pool provides faster and more reliable API access.
        :param str mailto: Email address for polite pool access. This allows for faster and more reliable API access.  Either this or the User-Agent header with mailto should be provided.
        :return: TextTopicsResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.text_topics_get_with_http_info(title, **kwargs)
        else:
            (data) = self.text_topics_get_with_http_info(title, **kwargs)
            return data

    def text_topics_get_with_http_info(self, title, **kwargs):
        """Get OpenAlex Topics for text
        Get only topics for your own text.  Query length must be between 20 and 2000 characters. Rate limited to 1 per second and 1000 requests per day.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.text_topics_get_with_http_info(title, async_req=True)
        >>> result = thread.get()
        :param async_req bool
        :param str title: The title of the text to analyze (required)
        :param str abstract: The abstract of the text to analyze
        :param str user_agent: User agent with email for polite pool access. Format: AppName/Version (mailto:email@example.com)  Polite pool provides faster and more reliable API access.
        :param str mailto: Email address for polite pool access. This allows for faster and more reliable API access.  Either this or the User-Agent header with mailto should be provided.
        :return: TextTopicsResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = ["title", "abstract", "user_agent", "mailto"]
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")
        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}'"
                    " to method text_topics_get"
                )
            params[key] = val
        del params["kwargs"]
        if "title" not in params or params["title"] is None:
            raise ValueError(
                "Missing the required parameter `title` when calling `text_topics_get`"
            )
        collection_formats = {}
        path_params = {}
        query_params = []
        if "title" in params:
            query_params.append(("title", params["title"]))
        if "abstract" in params:
            query_params.append(("abstract", params["abstract"]))
        if "mailto" in params:
            query_params.append(("mailto", params["mailto"]))
        header_params = {}
        if "user_agent" in params:
            header_params["User-Agent"] = params["user_agent"]
        form_params = []
        local_var_files = {}
        body_params = None
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )
        auth_settings = []
        return self.api_client.call_api(
            "/text/topics",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="TextTopicsResults",
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

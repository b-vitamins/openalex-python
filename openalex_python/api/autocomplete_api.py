"""OpenAlex API
OpenAlex is a fully open catalog of the global research system. It's named after the ancient Library of Alexandria and made by the nonprofit OurResearch.  The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day.  For best performance, add your email to all API requests to join the polite pool using either: - The `mailto` query parameter (e.g., `mailto=you@example.com`) - The `User-Agent` header with mailto (e.g., `User-Agent: MyApp/1.0 (mailto:you@example.com)`)  Premium users get an API key which grants higher API limits and access to special filters.
OpenAPI spec version: 1.0.0
Generated by: https://github.com/swagger-api/swagger-codegen.git.
"""

import six
from openalex_python.api_client import ApiClient


class AutocompleteApi:
    """NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def autocomplete_authors_get(self, q, **kwargs):
        """Autocomplete for authors
        Get autocomplete suggestions for authors. Searches display_name and display_name_alternatives fields.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.autocomplete_authors_get(q, async_req=True)
        >>> result = thread.get()
        :param async_req bool
        :param str q: The search query for autocomplete. Minimum 1 character. Returns up to 10 results sorted by citation count.  (required)
        :param str user_agent: User agent with email for polite pool access. Format: AppName/Version (mailto:email@example.com)  Polite pool provides faster and more reliable API access.
        :param str mailto: Email address for polite pool access. This allows for faster and more reliable API access.  Either this or the User-Agent header with mailto should be provided.
        :return: AutocompleteResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.autocomplete_authors_get_with_http_info(q, **kwargs)
        else:
            (data) = self.autocomplete_authors_get_with_http_info(q, **kwargs)
            return data

    def autocomplete_authors_get_with_http_info(self, q, **kwargs):
        """Autocomplete for authors
        Get autocomplete suggestions for authors. Searches display_name and display_name_alternatives fields.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.autocomplete_authors_get_with_http_info(q, async_req=True)
        >>> result = thread.get()
        :param async_req bool
        :param str q: The search query for autocomplete. Minimum 1 character. Returns up to 10 results sorted by citation count.  (required)
        :param str user_agent: User agent with email for polite pool access. Format: AppName/Version (mailto:email@example.com)  Polite pool provides faster and more reliable API access.
        :param str mailto: Email address for polite pool access. This allows for faster and more reliable API access.  Either this or the User-Agent header with mailto should be provided.
        :return: AutocompleteResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = ["q", "user_agent", "mailto"]
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")
        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}'"
                    " to method autocomplete_authors_get"
                )
            params[key] = val
        del params["kwargs"]
        if "q" not in params or params["q"] is None:
            raise ValueError(
                "Missing the required parameter `q` when calling `autocomplete_authors_get`"
            )
        collection_formats = {}
        path_params = {}
        query_params = []
        if "q" in params:
            query_params.append(("q", params["q"]))
        if "mailto" in params:
            query_params.append(("mailto", params["mailto"]))
        header_params = {}
        if "user_agent" in params:
            header_params["User-Agent"] = params["user_agent"]
        form_params = []
        local_var_files = {}
        body_params = None
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )
        auth_settings = []
        return self.api_client.call_api(
            "/autocomplete/authors",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="AutocompleteResults",
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def autocomplete_concepts_get(self, q, **kwargs):
        """Autocomplete for concepts
        Get autocomplete suggestions for concepts. Note: Concepts are deprecated in favor of Topics.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.autocomplete_concepts_get(q, async_req=True)
        >>> result = thread.get()
        :param async_req bool
        :param str q: The search query for autocomplete. Minimum 1 character. Returns up to 10 results sorted by citation count.  (required)
        :param str user_agent: User agent with email for polite pool access. Format: AppName/Version (mailto:email@example.com)  Polite pool provides faster and more reliable API access.
        :param str mailto: Email address for polite pool access. This allows for faster and more reliable API access.  Either this or the User-Agent header with mailto should be provided.
        :return: AutocompleteResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.autocomplete_concepts_get_with_http_info(q, **kwargs)
        else:
            (data) = self.autocomplete_concepts_get_with_http_info(q, **kwargs)
            return data

    def autocomplete_concepts_get_with_http_info(self, q, **kwargs):
        """Autocomplete for concepts
        Get autocomplete suggestions for concepts. Note: Concepts are deprecated in favor of Topics.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.autocomplete_concepts_get_with_http_info(q, async_req=True)
        >>> result = thread.get()
        :param async_req bool
        :param str q: The search query for autocomplete. Minimum 1 character. Returns up to 10 results sorted by citation count.  (required)
        :param str user_agent: User agent with email for polite pool access. Format: AppName/Version (mailto:email@example.com)  Polite pool provides faster and more reliable API access.
        :param str mailto: Email address for polite pool access. This allows for faster and more reliable API access.  Either this or the User-Agent header with mailto should be provided.
        :return: AutocompleteResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = ["q", "user_agent", "mailto"]
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")
        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}'"
                    " to method autocomplete_concepts_get"
                )
            params[key] = val
        del params["kwargs"]
        if "q" not in params or params["q"] is None:
            raise ValueError(
                "Missing the required parameter `q` when calling `autocomplete_concepts_get`"
            )
        collection_formats = {}
        path_params = {}
        query_params = []
        if "q" in params:
            query_params.append(("q", params["q"]))
        if "mailto" in params:
            query_params.append(("mailto", params["mailto"]))
        header_params = {}
        if "user_agent" in params:
            header_params["User-Agent"] = params["user_agent"]
        form_params = []
        local_var_files = {}
        body_params = None
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )
        auth_settings = []
        return self.api_client.call_api(
            "/autocomplete/concepts",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="AutocompleteResults",
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def autocomplete_funders_get(self, q, **kwargs):
        """Autocomplete for funders
        Get autocomplete suggestions for funders
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.autocomplete_funders_get(q, async_req=True)
        >>> result = thread.get()
        :param async_req bool
        :param str q: The search query for autocomplete. Minimum 1 character. Returns up to 10 results sorted by citation count.  (required)
        :param str user_agent: User agent with email for polite pool access. Format: AppName/Version (mailto:email@example.com)  Polite pool provides faster and more reliable API access.
        :param str mailto: Email address for polite pool access. This allows for faster and more reliable API access.  Either this or the User-Agent header with mailto should be provided.
        :return: AutocompleteResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.autocomplete_funders_get_with_http_info(q, **kwargs)
        else:
            (data) = self.autocomplete_funders_get_with_http_info(q, **kwargs)
            return data

    def autocomplete_funders_get_with_http_info(self, q, **kwargs):
        """Autocomplete for funders
        Get autocomplete suggestions for funders
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.autocomplete_funders_get_with_http_info(q, async_req=True)
        >>> result = thread.get()
        :param async_req bool
        :param str q: The search query for autocomplete. Minimum 1 character. Returns up to 10 results sorted by citation count.  (required)
        :param str user_agent: User agent with email for polite pool access. Format: AppName/Version (mailto:email@example.com)  Polite pool provides faster and more reliable API access.
        :param str mailto: Email address for polite pool access. This allows for faster and more reliable API access.  Either this or the User-Agent header with mailto should be provided.
        :return: AutocompleteResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = ["q", "user_agent", "mailto"]
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")
        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}'"
                    " to method autocomplete_funders_get"
                )
            params[key] = val
        del params["kwargs"]
        if "q" not in params or params["q"] is None:
            raise ValueError(
                "Missing the required parameter `q` when calling `autocomplete_funders_get`"
            )
        collection_formats = {}
        path_params = {}
        query_params = []
        if "q" in params:
            query_params.append(("q", params["q"]))
        if "mailto" in params:
            query_params.append(("mailto", params["mailto"]))
        header_params = {}
        if "user_agent" in params:
            header_params["User-Agent"] = params["user_agent"]
        form_params = []
        local_var_files = {}
        body_params = None
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )
        auth_settings = []
        return self.api_client.call_api(
            "/autocomplete/funders",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="AutocompleteResults",
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def autocomplete_get(self, q, **kwargs):
        """Autocomplete across all entity types
        Get autocomplete suggestions across all entity types. Returns up to 10 results sorted by citation count.  IDs in autocomplete queries are detected and matched to the appropriate record if it exists.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.autocomplete_get(q, async_req=True)
        >>> result = thread.get()
        :param async_req bool
        :param str q: The search query for autocomplete. Minimum 1 character. Returns up to 10 results sorted by citation count.  (required)
        :param str user_agent: User agent with email for polite pool access. Format: AppName/Version (mailto:email@example.com)  Polite pool provides faster and more reliable API access.
        :param str mailto: Email address for polite pool access. This allows for faster and more reliable API access.  Either this or the User-Agent header with mailto should be provided.
        :return: AutocompleteResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.autocomplete_get_with_http_info(q, **kwargs)
        else:
            (data) = self.autocomplete_get_with_http_info(q, **kwargs)
            return data

    def autocomplete_get_with_http_info(self, q, **kwargs):
        """Autocomplete across all entity types
        Get autocomplete suggestions across all entity types. Returns up to 10 results sorted by citation count.  IDs in autocomplete queries are detected and matched to the appropriate record if it exists.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.autocomplete_get_with_http_info(q, async_req=True)
        >>> result = thread.get()
        :param async_req bool
        :param str q: The search query for autocomplete. Minimum 1 character. Returns up to 10 results sorted by citation count.  (required)
        :param str user_agent: User agent with email for polite pool access. Format: AppName/Version (mailto:email@example.com)  Polite pool provides faster and more reliable API access.
        :param str mailto: Email address for polite pool access. This allows for faster and more reliable API access.  Either this or the User-Agent header with mailto should be provided.
        :return: AutocompleteResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = ["q", "user_agent", "mailto"]
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")
        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}'"
                    " to method autocomplete_get"
                )
            params[key] = val
        del params["kwargs"]
        if "q" not in params or params["q"] is None:
            raise ValueError(
                "Missing the required parameter `q` when calling `autocomplete_get`"
            )
        collection_formats = {}
        path_params = {}
        query_params = []
        if "q" in params:
            query_params.append(("q", params["q"]))
        if "mailto" in params:
            query_params.append(("mailto", params["mailto"]))
        header_params = {}
        if "user_agent" in params:
            header_params["User-Agent"] = params["user_agent"]
        form_params = []
        local_var_files = {}
        body_params = None
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )
        auth_settings = []
        return self.api_client.call_api(
            "/autocomplete",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="AutocompleteResults",
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def autocomplete_institutions_get(self, q, **kwargs):
        """Autocomplete for institutions
        Get autocomplete suggestions for institutions. Searches display_name, display_name_alternatives, and display_name_acronyms fields.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.autocomplete_institutions_get(q, async_req=True)
        >>> result = thread.get()
        :param async_req bool
        :param str q: The search query for autocomplete. Minimum 1 character. Returns up to 10 results sorted by citation count.  (required)
        :param str user_agent: User agent with email for polite pool access. Format: AppName/Version (mailto:email@example.com)  Polite pool provides faster and more reliable API access.
        :param str mailto: Email address for polite pool access. This allows for faster and more reliable API access.  Either this or the User-Agent header with mailto should be provided.
        :return: AutocompleteResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.autocomplete_institutions_get_with_http_info(q, **kwargs)
        else:
            (data) = self.autocomplete_institutions_get_with_http_info(q, **kwargs)
            return data

    def autocomplete_institutions_get_with_http_info(self, q, **kwargs):
        """Autocomplete for institutions
        Get autocomplete suggestions for institutions. Searches display_name, display_name_alternatives, and display_name_acronyms fields.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.autocomplete_institutions_get_with_http_info(q, async_req=True)
        >>> result = thread.get()
        :param async_req bool
        :param str q: The search query for autocomplete. Minimum 1 character. Returns up to 10 results sorted by citation count.  (required)
        :param str user_agent: User agent with email for polite pool access. Format: AppName/Version (mailto:email@example.com)  Polite pool provides faster and more reliable API access.
        :param str mailto: Email address for polite pool access. This allows for faster and more reliable API access.  Either this or the User-Agent header with mailto should be provided.
        :return: AutocompleteResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = ["q", "user_agent", "mailto"]
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")
        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}'"
                    " to method autocomplete_institutions_get"
                )
            params[key] = val
        del params["kwargs"]
        if "q" not in params or params["q"] is None:
            raise ValueError(
                "Missing the required parameter `q` when calling `autocomplete_institutions_get`"
            )
        collection_formats = {}
        path_params = {}
        query_params = []
        if "q" in params:
            query_params.append(("q", params["q"]))
        if "mailto" in params:
            query_params.append(("mailto", params["mailto"]))
        header_params = {}
        if "user_agent" in params:
            header_params["User-Agent"] = params["user_agent"]
        form_params = []
        local_var_files = {}
        body_params = None
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )
        auth_settings = []
        return self.api_client.call_api(
            "/autocomplete/institutions",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="AutocompleteResults",
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def autocomplete_publishers_get(self, q, **kwargs):
        """Autocomplete for publishers
        Get autocomplete suggestions for publishers. Searches display_name and alternate_titles fields.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.autocomplete_publishers_get(q, async_req=True)
        >>> result = thread.get()
        :param async_req bool
        :param str q: The search query for autocomplete. Minimum 1 character. Returns up to 10 results sorted by citation count.  (required)
        :param str user_agent: User agent with email for polite pool access. Format: AppName/Version (mailto:email@example.com)  Polite pool provides faster and more reliable API access.
        :param str mailto: Email address for polite pool access. This allows for faster and more reliable API access.  Either this or the User-Agent header with mailto should be provided.
        :return: AutocompleteResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.autocomplete_publishers_get_with_http_info(q, **kwargs)
        else:
            (data) = self.autocomplete_publishers_get_with_http_info(q, **kwargs)
            return data

    def autocomplete_publishers_get_with_http_info(self, q, **kwargs):
        """Autocomplete for publishers
        Get autocomplete suggestions for publishers. Searches display_name and alternate_titles fields.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.autocomplete_publishers_get_with_http_info(q, async_req=True)
        >>> result = thread.get()
        :param async_req bool
        :param str q: The search query for autocomplete. Minimum 1 character. Returns up to 10 results sorted by citation count.  (required)
        :param str user_agent: User agent with email for polite pool access. Format: AppName/Version (mailto:email@example.com)  Polite pool provides faster and more reliable API access.
        :param str mailto: Email address for polite pool access. This allows for faster and more reliable API access.  Either this or the User-Agent header with mailto should be provided.
        :return: AutocompleteResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = ["q", "user_agent", "mailto"]
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")
        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}'"
                    " to method autocomplete_publishers_get"
                )
            params[key] = val
        del params["kwargs"]
        if "q" not in params or params["q"] is None:
            raise ValueError(
                "Missing the required parameter `q` when calling `autocomplete_publishers_get`"
            )
        collection_formats = {}
        path_params = {}
        query_params = []
        if "q" in params:
            query_params.append(("q", params["q"]))
        if "mailto" in params:
            query_params.append(("mailto", params["mailto"]))
        header_params = {}
        if "user_agent" in params:
            header_params["User-Agent"] = params["user_agent"]
        form_params = []
        local_var_files = {}
        body_params = None
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )
        auth_settings = []
        return self.api_client.call_api(
            "/autocomplete/publishers",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="AutocompleteResults",
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def autocomplete_sources_get(self, q, **kwargs):
        """Autocomplete for sources
        Get autocomplete suggestions for sources. Searches display_name, alternate_titles, and abbreviated_title fields.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.autocomplete_sources_get(q, async_req=True)
        >>> result = thread.get()
        :param async_req bool
        :param str q: The search query for autocomplete. Minimum 1 character. Returns up to 10 results sorted by citation count.  (required)
        :param str user_agent: User agent with email for polite pool access. Format: AppName/Version (mailto:email@example.com)  Polite pool provides faster and more reliable API access.
        :param str mailto: Email address for polite pool access. This allows for faster and more reliable API access.  Either this or the User-Agent header with mailto should be provided.
        :return: AutocompleteResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.autocomplete_sources_get_with_http_info(q, **kwargs)
        else:
            (data) = self.autocomplete_sources_get_with_http_info(q, **kwargs)
            return data

    def autocomplete_sources_get_with_http_info(self, q, **kwargs):
        """Autocomplete for sources
        Get autocomplete suggestions for sources. Searches display_name, alternate_titles, and abbreviated_title fields.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.autocomplete_sources_get_with_http_info(q, async_req=True)
        >>> result = thread.get()
        :param async_req bool
        :param str q: The search query for autocomplete. Minimum 1 character. Returns up to 10 results sorted by citation count.  (required)
        :param str user_agent: User agent with email for polite pool access. Format: AppName/Version (mailto:email@example.com)  Polite pool provides faster and more reliable API access.
        :param str mailto: Email address for polite pool access. This allows for faster and more reliable API access.  Either this or the User-Agent header with mailto should be provided.
        :return: AutocompleteResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = ["q", "user_agent", "mailto"]
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")
        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}'"
                    " to method autocomplete_sources_get"
                )
            params[key] = val
        del params["kwargs"]
        if "q" not in params or params["q"] is None:
            raise ValueError(
                "Missing the required parameter `q` when calling `autocomplete_sources_get`"
            )
        collection_formats = {}
        path_params = {}
        query_params = []
        if "q" in params:
            query_params.append(("q", params["q"]))
        if "mailto" in params:
            query_params.append(("mailto", params["mailto"]))
        header_params = {}
        if "user_agent" in params:
            header_params["User-Agent"] = params["user_agent"]
        form_params = []
        local_var_files = {}
        body_params = None
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )
        auth_settings = []
        return self.api_client.call_api(
            "/autocomplete/sources",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="AutocompleteResults",
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def autocomplete_works_get(self, q, **kwargs):
        """Autocomplete for works
        Get autocomplete suggestions for works. Searches title field. Supports filters and search parameters.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.autocomplete_works_get(q, async_req=True)
        >>> result = thread.get()
        :param async_req bool
        :param str q: The search query for autocomplete. Minimum 1 character. Returns up to 10 results sorted by citation count.  (required)
        :param str filter: Filter results using field:value pairs. Multiple filters are combined with AND. Use comma to separate filters, pipe (|) for OR within a field, and ! for negation. Examples: - Single filter: publication_year:2022 - Multiple filters: publication_year:2022,type:article - OR within field: institutions.country_code:us|gb - Negation: type:!paratext - Inequality: cited_by_count:>100 - Search filter: title.search:climate change
        :param str search: Search query string. Searches different fields based on entity type: - Works: title, abstract, fulltext - Authors: display_name, display_name_alternatives - Sources: display_name, alternate_titles, abbreviated_title - Institutions: display_name, display_name_alternatives, display_name_acronyms - Topics: display_name, description, keywords - Publishers: display_name, alternate_titles - Funders: display_name, alternate_titles, description - Concepts: display_name, description  Supports boolean operators (AND, OR, NOT in uppercase) and phrase search with quotes.
        :param str user_agent: User agent with email for polite pool access. Format: AppName/Version (mailto:email@example.com)  Polite pool provides faster and more reliable API access.
        :param str mailto: Email address for polite pool access. This allows for faster and more reliable API access.  Either this or the User-Agent header with mailto should be provided.
        :return: AutocompleteResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.autocomplete_works_get_with_http_info(q, **kwargs)
        else:
            (data) = self.autocomplete_works_get_with_http_info(q, **kwargs)
            return data

    def autocomplete_works_get_with_http_info(self, q, **kwargs):
        """Autocomplete for works
        Get autocomplete suggestions for works. Searches title field. Supports filters and search parameters.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.autocomplete_works_get_with_http_info(q, async_req=True)
        >>> result = thread.get()
        :param async_req bool
        :param str q: The search query for autocomplete. Minimum 1 character. Returns up to 10 results sorted by citation count.  (required)
        :param str filter: Filter results using field:value pairs. Multiple filters are combined with AND. Use comma to separate filters, pipe (|) for OR within a field, and ! for negation. Examples: - Single filter: publication_year:2022 - Multiple filters: publication_year:2022,type:article - OR within field: institutions.country_code:us|gb - Negation: type:!paratext - Inequality: cited_by_count:>100 - Search filter: title.search:climate change
        :param str search: Search query string. Searches different fields based on entity type: - Works: title, abstract, fulltext - Authors: display_name, display_name_alternatives - Sources: display_name, alternate_titles, abbreviated_title - Institutions: display_name, display_name_alternatives, display_name_acronyms - Topics: display_name, description, keywords - Publishers: display_name, alternate_titles - Funders: display_name, alternate_titles, description - Concepts: display_name, description  Supports boolean operators (AND, OR, NOT in uppercase) and phrase search with quotes.
        :param str user_agent: User agent with email for polite pool access. Format: AppName/Version (mailto:email@example.com)  Polite pool provides faster and more reliable API access.
        :param str mailto: Email address for polite pool access. This allows for faster and more reliable API access.  Either this or the User-Agent header with mailto should be provided.
        :return: AutocompleteResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = ["q", "filter", "search", "user_agent", "mailto"]
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")
        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}'"
                    " to method autocomplete_works_get"
                )
            params[key] = val
        del params["kwargs"]
        if "q" not in params or params["q"] is None:
            raise ValueError(
                "Missing the required parameter `q` when calling `autocomplete_works_get`"
            )
        collection_formats = {}
        path_params = {}
        query_params = []
        if "q" in params:
            query_params.append(("q", params["q"]))
        if "filter" in params:
            query_params.append(("filter", params["filter"]))
        if "search" in params:
            query_params.append(("search", params["search"]))
        if "mailto" in params:
            query_params.append(("mailto", params["mailto"]))
        header_params = {}
        if "user_agent" in params:
            header_params["User-Agent"] = params["user_agent"]
        form_params = []
        local_var_files = {}
        body_params = None
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )
        auth_settings = []
        return self.api_client.call_api(
            "/autocomplete/works",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="AutocompleteResults",
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

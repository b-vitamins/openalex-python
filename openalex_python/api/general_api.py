"""OpenAlex API
OpenAlex is a fully open catalog of the global research system. It's named after the ancient Library of Alexandria and made by the nonprofit OurResearch.  The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day.  For best performance, add your email to all API requests to join the polite pool using either: - The `mailto` query parameter (e.g., `mailto=you@example.com`) - The `User-Agent` header with mailto (e.g., `User-Agent: MyApp/1.0 (mailto:you@example.com)`)  Premium users get an API key which grants higher API limits and access to special filters.
OpenAPI spec version: 1.0.0
Generated by: https://github.com/swagger-api/swagger-codegen.git.
"""

import six
from openalex_python.api_client import ApiClient


class GeneralApi:
    """NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def root_get(self, **kwargs):
        """Root endpoint
        Get basic information about the API
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.root_get(async_req=True)
        >>> result = thread.get()
        :param async_req bool
        :param str user_agent: User agent with email for polite pool access. Format: AppName/Version (mailto:email@example.com)  Polite pool provides faster and more reliable API access.
        :param str mailto: Email address for polite pool access. This allows for faster and more reliable API access.  Either this or the User-Agent header with mailto should be provided.
        :return: RootResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.root_get_with_http_info(**kwargs)
        else:
            (data) = self.root_get_with_http_info(**kwargs)
            return data

    def root_get_with_http_info(self, **kwargs):
        """Root endpoint
        Get basic information about the API
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.root_get_with_http_info(async_req=True)
        >>> result = thread.get()
        :param async_req bool
        :param str user_agent: User agent with email for polite pool access. Format: AppName/Version (mailto:email@example.com)  Polite pool provides faster and more reliable API access.
        :param str mailto: Email address for polite pool access. This allows for faster and more reliable API access.  Either this or the User-Agent header with mailto should be provided.
        :return: RootResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = ["user_agent", "mailto"]
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")
        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}' to method root_get"
                )
            params[key] = val
        del params["kwargs"]
        collection_formats = {}
        path_params = {}
        query_params = []
        if "mailto" in params:
            query_params.append(("mailto", params["mailto"]))
        header_params = {}
        if "user_agent" in params:
            header_params["User-Agent"] = params["user_agent"]
        form_params = []
        local_var_files = {}
        body_params = None
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )
        auth_settings = []
        return self.api_client.call_api(
            "/",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="RootResponse",
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

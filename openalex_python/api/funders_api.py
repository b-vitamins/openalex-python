"""OpenAlex API
OpenAlex is a fully open catalog of the global research system. It's named after the ancient Library of Alexandria and made by the nonprofit OurResearch.  The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day.  For best performance, add your email to all API requests to join the polite pool using either: - The `mailto` query parameter (e.g., `mailto=you@example.com`) - The `User-Agent` header with mailto (e.g., `User-Agent: MyApp/1.0 (mailto:you@example.com)`)  Premium users get an API key which grants higher API limits and access to special filters.
OpenAPI spec version: 1.0.0
Generated by: https://github.com/swagger-api/swagger-codegen.git.
"""

import six
from openalex_python.api_client import ApiClient


class FundersApi:
    """NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def funders_get(self, **kwargs):
        """List funders
        Get a paginated list of funders with optional filtering, searching, and sorting. Funders are organizations that fund research.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.funders_get(async_req=True)
        >>> result = thread.get()
        :param async_req bool
        :param str api_key: API key for premium access. Grants higher API limits and enables special filters like from_updated_date.
        :param str cursor: Cursor for cursor-based pagination. Use cursor=* to start cursor pagination. Allows access to more than 10,000 results. Not compatible with sample parameter.
        :param str filter: Filter results using field:value pairs. Multiple filters are combined with AND. Use comma to separate filters, pipe (|) for OR within a field, and ! for negation. Examples: - Single filter: publication_year:2022 - Multiple filters: publication_year:2022,type:article - OR within field: institutions.country_code:us|gb - Negation: type:!paratext - Inequality: cited_by_count:>100 - Search filter: title.search:climate change
        :param str group_by: Group results by a field to get counts. Maximum 200 groups returned. Append :include_unknown to include null/unknown values. Example: group_by=open_access.oa_status:include_unknown
        :param int page: Page number for basic pagination (1-based). Limited to first 10,000 results. Use cursor pagination for more.
        :param int per_page: Number of results per page
        :param int sample: Get a random sample of results. Maximum 10,000. Use with seed parameter for reproducible samples. Not compatible with cursor pagination.
        :param str search: Search query string. Searches different fields based on entity type: - Works: title, abstract, fulltext - Authors: display_name, display_name_alternatives - Sources: display_name, alternate_titles, abbreviated_title - Institutions: display_name, display_name_alternatives, display_name_acronyms - Topics: display_name, description, keywords - Publishers: display_name, alternate_titles - Funders: display_name, alternate_titles, description - Concepts: display_name, description  Supports boolean operators (AND, OR, NOT in uppercase) and phrase search with quotes.
        :param str seed: Seed value for random sampling to get reproducible results. Required when paging through sampled results.
        :param str select: Select only specific top-level fields to return. Use comma-separated field names. Example: id,display_name,cited_by_count  Cannot select nested fields. Does not work with group_by or autocomplete.
        :param str sort: Sort results by a field. Use field:direction format. Direction can be asc (ascending, default) or desc (descending).  Sortable fields: - display_name - cited_by_count - works_count - publication_date (works only) - relevance_score (only when searching)  Example: cited_by_count:desc
        :param str user_agent: User agent with email for polite pool access. Format: AppName/Version (mailto:email@example.com)  Polite pool provides faster and more reliable API access.
        :param str mailto: Email address for polite pool access. This allows for faster and more reliable API access.  Either this or the User-Agent header with mailto should be provided.
        :return: FundersList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.funders_get_with_http_info(**kwargs)
        else:
            (data) = self.funders_get_with_http_info(**kwargs)
            return data

    def funders_get_with_http_info(self, **kwargs):
        """List funders
        Get a paginated list of funders with optional filtering, searching, and sorting. Funders are organizations that fund research.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.funders_get_with_http_info(async_req=True)
        >>> result = thread.get()
        :param async_req bool
        :param str api_key: API key for premium access. Grants higher API limits and enables special filters like from_updated_date.
        :param str cursor: Cursor for cursor-based pagination. Use cursor=* to start cursor pagination. Allows access to more than 10,000 results. Not compatible with sample parameter.
        :param str filter: Filter results using field:value pairs. Multiple filters are combined with AND. Use comma to separate filters, pipe (|) for OR within a field, and ! for negation. Examples: - Single filter: publication_year:2022 - Multiple filters: publication_year:2022,type:article - OR within field: institutions.country_code:us|gb - Negation: type:!paratext - Inequality: cited_by_count:>100 - Search filter: title.search:climate change
        :param str group_by: Group results by a field to get counts. Maximum 200 groups returned. Append :include_unknown to include null/unknown values. Example: group_by=open_access.oa_status:include_unknown
        :param int page: Page number for basic pagination (1-based). Limited to first 10,000 results. Use cursor pagination for more.
        :param int per_page: Number of results per page
        :param int sample: Get a random sample of results. Maximum 10,000. Use with seed parameter for reproducible samples. Not compatible with cursor pagination.
        :param str search: Search query string. Searches different fields based on entity type: - Works: title, abstract, fulltext - Authors: display_name, display_name_alternatives - Sources: display_name, alternate_titles, abbreviated_title - Institutions: display_name, display_name_alternatives, display_name_acronyms - Topics: display_name, description, keywords - Publishers: display_name, alternate_titles - Funders: display_name, alternate_titles, description - Concepts: display_name, description  Supports boolean operators (AND, OR, NOT in uppercase) and phrase search with quotes.
        :param str seed: Seed value for random sampling to get reproducible results. Required when paging through sampled results.
        :param str select: Select only specific top-level fields to return. Use comma-separated field names. Example: id,display_name,cited_by_count  Cannot select nested fields. Does not work with group_by or autocomplete.
        :param str sort: Sort results by a field. Use field:direction format. Direction can be asc (ascending, default) or desc (descending).  Sortable fields: - display_name - cited_by_count - works_count - publication_date (works only) - relevance_score (only when searching)  Example: cited_by_count:desc
        :param str user_agent: User agent with email for polite pool access. Format: AppName/Version (mailto:email@example.com)  Polite pool provides faster and more reliable API access.
        :param str mailto: Email address for polite pool access. This allows for faster and more reliable API access.  Either this or the User-Agent header with mailto should be provided.
        :return: FundersList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = [
            "api_key",
            "cursor",
            "filter",
            "group_by",
            "page",
            "per_page",
            "sample",
            "search",
            "seed",
            "select",
            "sort",
            "user_agent",
            "mailto",
        ]
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")
        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}'"
                    " to method funders_get"
                )
            params[key] = val
        del params["kwargs"]
        collection_formats = {}
        path_params = {}
        query_params = []
        if "api_key" in params:
            query_params.append(("api_key", params["api_key"]))
        if "cursor" in params:
            query_params.append(("cursor", params["cursor"]))
        if "filter" in params:
            query_params.append(("filter", params["filter"]))
        if "group_by" in params:
            query_params.append(("group_by", params["group_by"]))
        if "page" in params:
            query_params.append(("page", params["page"]))
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))
        if "sample" in params:
            query_params.append(("sample", params["sample"]))
        if "search" in params:
            query_params.append(("search", params["search"]))
        if "seed" in params:
            query_params.append(("seed", params["seed"]))
        if "select" in params:
            query_params.append(("select", params["select"]))
        if "sort" in params:
            query_params.append(("sort", params["sort"]))
        if "mailto" in params:
            query_params.append(("mailto", params["mailto"]))
        header_params = {}
        if "user_agent" in params:
            header_params["User-Agent"] = params["user_agent"]
        form_params = []
        local_var_files = {}
        body_params = None
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )
        auth_settings = []
        return self.api_client.call_api(
            "/funders",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="FundersList",
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def funders_id_get(self, id, **kwargs):
        """Get a single funder
        Get details for a single funder by its identifier.  Supported ID formats: - OpenAlex ID (e.g., F4320332161 or https://openalex.org/F4320332161) - ROR ID (e.g., ror:01cwqze88) - Wikidata ID (e.g., wikidata:Q390551)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.funders_id_get(id, async_req=True)
        >>> result = thread.get()
        :param async_req bool
        :param str id: The identifier for the funder. Can be: - OpenAlex ID (e.g., F4320332161) - ROR ID - Wikidata ID  (required)
        :param str select: Select only specific top-level fields to return. Use comma-separated field names. Example: id,display_name,cited_by_count  Cannot select nested fields. Does not work with group_by or autocomplete.
        :param str user_agent: User agent with email for polite pool access. Format: AppName/Version (mailto:email@example.com)  Polite pool provides faster and more reliable API access.
        :param str mailto: Email address for polite pool access. This allows for faster and more reliable API access.  Either this or the User-Agent header with mailto should be provided.
        :return: Funder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.funders_id_get_with_http_info(id, **kwargs)
        else:
            (data) = self.funders_id_get_with_http_info(id, **kwargs)
            return data

    def funders_id_get_with_http_info(self, id, **kwargs):
        """Get a single funder
        Get details for a single funder by its identifier.  Supported ID formats: - OpenAlex ID (e.g., F4320332161 or https://openalex.org/F4320332161) - ROR ID (e.g., ror:01cwqze88) - Wikidata ID (e.g., wikidata:Q390551)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.funders_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()
        :param async_req bool
        :param str id: The identifier for the funder. Can be: - OpenAlex ID (e.g., F4320332161) - ROR ID - Wikidata ID  (required)
        :param str select: Select only specific top-level fields to return. Use comma-separated field names. Example: id,display_name,cited_by_count  Cannot select nested fields. Does not work with group_by or autocomplete.
        :param str user_agent: User agent with email for polite pool access. Format: AppName/Version (mailto:email@example.com)  Polite pool provides faster and more reliable API access.
        :param str mailto: Email address for polite pool access. This allows for faster and more reliable API access.  Either this or the User-Agent header with mailto should be provided.
        :return: Funder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = ["id", "select", "user_agent", "mailto"]
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")
        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}'"
                    " to method funders_id_get"
                )
            params[key] = val
        del params["kwargs"]
        if "id" not in params or params["id"] is None:
            raise ValueError(
                "Missing the required parameter `id` when calling `funders_id_get`"
            )
        collection_formats = {}
        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]
        query_params = []
        if "select" in params:
            query_params.append(("select", params["select"]))
        if "mailto" in params:
            query_params.append(("mailto", params["mailto"]))
        header_params = {}
        if "user_agent" in params:
            header_params["User-Agent"] = params["user_agent"]
        form_params = []
        local_var_files = {}
        body_params = None
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )
        auth_settings = []
        return self.api_client.call_api(
            "/funders/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="Funder",
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def funders_random_get(self, **kwargs):
        """Get a random funder
        Returns a random funder from the catalog
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.funders_random_get(async_req=True)
        >>> result = thread.get()
        :param async_req bool
        :param str select: Select only specific top-level fields to return. Use comma-separated field names. Example: id,display_name,cited_by_count  Cannot select nested fields. Does not work with group_by or autocomplete.
        :param str user_agent: User agent with email for polite pool access. Format: AppName/Version (mailto:email@example.com)  Polite pool provides faster and more reliable API access.
        :param str mailto: Email address for polite pool access. This allows for faster and more reliable API access.  Either this or the User-Agent header with mailto should be provided.
        :return: Funder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.funders_random_get_with_http_info(**kwargs)
        else:
            (data) = self.funders_random_get_with_http_info(**kwargs)
            return data

    def funders_random_get_with_http_info(self, **kwargs):
        """Get a random funder
        Returns a random funder from the catalog
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.funders_random_get_with_http_info(async_req=True)
        >>> result = thread.get()
        :param async_req bool
        :param str select: Select only specific top-level fields to return. Use comma-separated field names. Example: id,display_name,cited_by_count  Cannot select nested fields. Does not work with group_by or autocomplete.
        :param str user_agent: User agent with email for polite pool access. Format: AppName/Version (mailto:email@example.com)  Polite pool provides faster and more reliable API access.
        :param str mailto: Email address for polite pool access. This allows for faster and more reliable API access.  Either this or the User-Agent header with mailto should be provided.
        :return: Funder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = ["select", "user_agent", "mailto"]
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")
        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    f"Got an unexpected keyword argument '{key}'"
                    " to method funders_random_get"
                )
            params[key] = val
        del params["kwargs"]
        collection_formats = {}
        path_params = {}
        query_params = []
        if "select" in params:
            query_params.append(("select", params["select"]))
        if "mailto" in params:
            query_params.append(("mailto", params["mailto"]))
        header_params = {}
        if "user_agent" in params:
            header_params["User-Agent"] = params["user_agent"]
        form_params = []
        local_var_files = {}
        body_params = None
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )
        auth_settings = []
        return self.api_client.call_api(
            "/funders/random",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="Funder",
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

"""OpenAlex API
OpenAlex is a fully open catalog of the global research system. It's named after the ancient Library of Alexandria and made by the nonprofit OurResearch.  The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day.  For best performance, add your email to all API requests to join the polite pool using either: - The `mailto` query parameter (e.g., `mailto=you@example.com`) - The `User-Agent` header with mailto (e.g., `User-Agent: MyApp/1.0 (mailto:you@example.com)`)  Premium users get an API key which grants higher API limits and access to special filters.
OpenAPI spec version: 1.0.0
Generated by: https://github.com/swagger-api/swagger-codegen.git.
"""

import pprint

import six


class CountsByYearInner:
    """NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"year": "int", "works_count": "int", "cited_by_count": "int"}
    attribute_map = {
        "year": "year",
        "works_count": "works_count",
        "cited_by_count": "cited_by_count",
    }

    def __init__(self, year=None, works_count=None, cited_by_count=None):
        """CountsByYearInner - a model defined in Swagger."""
        self._year = None
        self._works_count = None
        self._cited_by_count = None
        self.discriminator = None
        self.year = year
        if works_count is not None:
            self.works_count = works_count
        if cited_by_count is not None:
            self.cited_by_count = cited_by_count

    @property
    def year(self):
        """Gets the year of this CountsByYearInner.
        :return: The year of this CountsByYearInner.
        :rtype: int.
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this CountsByYearInner.
        :param year: The year of this CountsByYearInner.
        :type: int.
        """
        if year is None:
            raise ValueError("Invalid value for `year`, must not be `None`")
        self._year = year

    @property
    def works_count(self):
        """Gets the works_count of this CountsByYearInner.
        :return: The works_count of this CountsByYearInner.
        :rtype: int.
        """
        return self._works_count

    @works_count.setter
    def works_count(self, works_count):
        """Sets the works_count of this CountsByYearInner.
        :param works_count: The works_count of this CountsByYearInner.
        :type: int.
        """
        self._works_count = works_count

    @property
    def cited_by_count(self):
        """Gets the cited_by_count of this CountsByYearInner.
        :return: The cited_by_count of this CountsByYearInner.
        :rtype: int.
        """
        return self._cited_by_count

    @cited_by_count.setter
    def cited_by_count(self, cited_by_count):
        """Sets the cited_by_count of this CountsByYearInner.
        :param cited_by_count: The cited_by_count of this CountsByYearInner.
        :type: int.
        """
        self._cited_by_count = cited_by_count

    def to_dict(self):
        """Returns the model properties as a dict."""
        result = {}
        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = [x.to_dict() if hasattr(x, "to_dict") else x for x in value]
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(CountsByYearInner, dict):
            for key, value in self.items():
                result[key] = value
        return result

    def to_str(self):
        """Returns the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal."""
        if not isinstance(other, CountsByYearInner):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal."""
        return not self == other

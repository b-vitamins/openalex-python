"""OpenAlex API
OpenAlex is a fully open catalog of the global research system. It's named after the ancient Library of Alexandria and made by the nonprofit OurResearch.  The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day.  For best performance, add your email to all API requests to join the polite pool using either: - The `mailto` query parameter (e.g., `mailto=you@example.com`) - The `User-Agent` header with mailto (e.g., `User-Agent: MyApp/1.0 (mailto:you@example.com)`)  Premium users get an API key which grants higher API limits and access to special filters.
OpenAPI spec version: 1.0.0
Generated by: https://github.com/swagger-api/swagger-codegen.git.
"""

import pprint

import six


class FundersList:
    """NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "meta": "Meta",
        "results": "list[Funder]",
        "group_by": "GroupByResult",
    }
    attribute_map = {"meta": "meta", "results": "results", "group_by": "group_by"}

    def __init__(self, meta=None, results=None, group_by=None):
        """FundersList - a model defined in Swagger."""
        self._meta = None
        self._results = None
        self._group_by = None
        self.discriminator = None
        self.meta = meta
        self.results = results
        if group_by is not None:
            self.group_by = group_by

    @property
    def meta(self):
        """Gets the meta of this FundersList.
        :return: The meta of this FundersList.
        :rtype: Meta.
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this FundersList.
        :param meta: The meta of this FundersList.
        :type: Meta.
        """
        if meta is None:
            raise ValueError("Invalid value for `meta`, must not be `None`")
        self._meta = meta

    @property
    def results(self):
        """Gets the results of this FundersList.
        :return: The results of this FundersList.
        :rtype: list[Funder].
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this FundersList.
        :param results: The results of this FundersList.
        :type: list[Funder].
        """
        if results is None:
            raise ValueError("Invalid value for `results`, must not be `None`")
        self._results = results

    @property
    def group_by(self):
        """Gets the group_by of this FundersList.
        :return: The group_by of this FundersList.
        :rtype: GroupByResult.
        """
        return self._group_by

    @group_by.setter
    def group_by(self, group_by):
        """Sets the group_by of this FundersList.
        :param group_by: The group_by of this FundersList.
        :type: GroupByResult.
        """
        self._group_by = group_by

    def to_dict(self):
        """Returns the model properties as a dict."""
        result = {}
        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = [x.to_dict() if hasattr(x, "to_dict") else x for x in value]
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(FundersList, dict):
            for key, value in self.items():
                result[key] = value
        return result

    def to_str(self):
        """Returns the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal."""
        if not isinstance(other, FundersList):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal."""
        return not self == other

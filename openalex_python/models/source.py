"""OpenAlex API
OpenAlex is a fully open catalog of the global research system. It's named after the ancient Library of Alexandria and made by the nonprofit OurResearch.  The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day.  For best performance, add your email to all API requests to join the polite pool using either: - The `mailto` query parameter (e.g., `mailto=you@example.com`) - The `User-Agent` header with mailto (e.g., `User-Agent: MyApp/1.0 (mailto:you@example.com)`)  Premium users get an API key which grants higher API limits and access to special filters.
OpenAPI spec version: 1.0.0
Generated by: https://github.com/swagger-api/swagger-codegen.git.
"""

import pprint

import six


class Source:
    """NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "id": "str",
        "issn_l": "str",
        "issn": "list[str]",
        "display_name": "str",
        "host_organization": "str",
        "host_organization_name": "str",
        "host_organization_lineage": "list[str]",
        "works_count": "int",
        "cited_by_count": "int",
        "summary_stats": "SummaryStats",
        "is_oa": "bool",
        "is_in_doaj": "bool",
        "is_core": "bool",
        "type": "str",
        "homepage_url": "str",
        "apc_prices": "list[SourceApcPrices]",
        "apc_usd": "int",
        "country_code": "str",
        "societies": "list[SourceSocieties]",
        "alternate_titles": "list[str]",
        "abbreviated_title": "str",
        "x_concepts": "list[DehydratedConcept]",
        "counts_by_year": "CountsByYear",
        "works_api_url": "str",
        "updated_date": "datetime",
        "created_date": "date",
        "ids": "SourceIds",
    }
    attribute_map = {
        "id": "id",
        "issn_l": "issn_l",
        "issn": "issn",
        "display_name": "display_name",
        "host_organization": "host_organization",
        "host_organization_name": "host_organization_name",
        "host_organization_lineage": "host_organization_lineage",
        "works_count": "works_count",
        "cited_by_count": "cited_by_count",
        "summary_stats": "summary_stats",
        "is_oa": "is_oa",
        "is_in_doaj": "is_in_doaj",
        "is_core": "is_core",
        "type": "type",
        "homepage_url": "homepage_url",
        "apc_prices": "apc_prices",
        "apc_usd": "apc_usd",
        "country_code": "country_code",
        "societies": "societies",
        "alternate_titles": "alternate_titles",
        "abbreviated_title": "abbreviated_title",
        "x_concepts": "x_concepts",
        "counts_by_year": "counts_by_year",
        "works_api_url": "works_api_url",
        "updated_date": "updated_date",
        "created_date": "created_date",
        "ids": "ids",
    }

    def __init__(
        self,
        id=None,
        issn_l=None,
        issn=None,
        display_name=None,
        host_organization=None,
        host_organization_name=None,
        host_organization_lineage=None,
        works_count=None,
        cited_by_count=None,
        summary_stats=None,
        is_oa=None,
        is_in_doaj=None,
        is_core=None,
        type=None,
        homepage_url=None,
        apc_prices=None,
        apc_usd=None,
        country_code=None,
        societies=None,
        alternate_titles=None,
        abbreviated_title=None,
        x_concepts=None,
        counts_by_year=None,
        works_api_url=None,
        updated_date=None,
        created_date=None,
        ids=None,
    ):
        """Source - a model defined in Swagger."""
        self._id = None
        self._issn_l = None
        self._issn = None
        self._display_name = None
        self._host_organization = None
        self._host_organization_name = None
        self._host_organization_lineage = None
        self._works_count = None
        self._cited_by_count = None
        self._summary_stats = None
        self._is_oa = None
        self._is_in_doaj = None
        self._is_core = None
        self._type = None
        self._homepage_url = None
        self._apc_prices = None
        self._apc_usd = None
        self._country_code = None
        self._societies = None
        self._alternate_titles = None
        self._abbreviated_title = None
        self._x_concepts = None
        self._counts_by_year = None
        self._works_api_url = None
        self._updated_date = None
        self._created_date = None
        self._ids = None
        self.discriminator = None
        self.id = id
        if issn_l is not None:
            self.issn_l = issn_l
        if issn is not None:
            self.issn = issn
        self.display_name = display_name
        if host_organization is not None:
            self.host_organization = host_organization
        if host_organization_name is not None:
            self.host_organization_name = host_organization_name
        if host_organization_lineage is not None:
            self.host_organization_lineage = host_organization_lineage
        if works_count is not None:
            self.works_count = works_count
        if cited_by_count is not None:
            self.cited_by_count = cited_by_count
        if summary_stats is not None:
            self.summary_stats = summary_stats
        if is_oa is not None:
            self.is_oa = is_oa
        if is_in_doaj is not None:
            self.is_in_doaj = is_in_doaj
        if is_core is not None:
            self.is_core = is_core
        if type is not None:
            self.type = type
        if homepage_url is not None:
            self.homepage_url = homepage_url
        if apc_prices is not None:
            self.apc_prices = apc_prices
        if apc_usd is not None:
            self.apc_usd = apc_usd
        if country_code is not None:
            self.country_code = country_code
        if societies is not None:
            self.societies = societies
        if alternate_titles is not None:
            self.alternate_titles = alternate_titles
        if abbreviated_title is not None:
            self.abbreviated_title = abbreviated_title
        if x_concepts is not None:
            self.x_concepts = x_concepts
        if counts_by_year is not None:
            self.counts_by_year = counts_by_year
        if works_api_url is not None:
            self.works_api_url = works_api_url
        if updated_date is not None:
            self.updated_date = updated_date
        if created_date is not None:
            self.created_date = created_date
        if ids is not None:
            self.ids = ids

    @property
    def id(self):
        """Gets the id of this Source.
        :return: The id of this Source.
        :rtype: str.
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Source.
        :param id: The id of this Source.
        :type: str.
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        self._id = id

    @property
    def issn_l(self):
        """Gets the issn_l of this Source.
        The ISSN-L identifying this source
        :return: The issn_l of this Source.
        :rtype: str.
        """
        return self._issn_l

    @issn_l.setter
    def issn_l(self, issn_l):
        """Sets the issn_l of this Source.
        The ISSN-L identifying this source
        :param issn_l: The issn_l of this Source.
        :type: str.
        """
        self._issn_l = issn_l

    @property
    def issn(self):
        """Gets the issn of this Source.
        The ISSNs used by this source
        :return: The issn of this Source.
        :rtype: list[str].
        """
        return self._issn

    @issn.setter
    def issn(self, issn):
        """Sets the issn of this Source.
        The ISSNs used by this source
        :param issn: The issn of this Source.
        :type: list[str].
        """
        self._issn = issn

    @property
    def display_name(self):
        """Gets the display_name of this Source.
        :return: The display_name of this Source.
        :rtype: str.
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Source.
        :param display_name: The display_name of this Source.
        :type: str.
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")
        self._display_name = display_name

    @property
    def host_organization(self):
        """Gets the host_organization of this Source.
        OpenAlex ID of the host organization
        :return: The host_organization of this Source.
        :rtype: str.
        """
        return self._host_organization

    @host_organization.setter
    def host_organization(self, host_organization):
        """Sets the host_organization of this Source.
        OpenAlex ID of the host organization
        :param host_organization: The host_organization of this Source.
        :type: str.
        """
        self._host_organization = host_organization

    @property
    def host_organization_name(self):
        """Gets the host_organization_name of this Source.
        The display name of the host organization
        :return: The host_organization_name of this Source.
        :rtype: str.
        """
        return self._host_organization_name

    @host_organization_name.setter
    def host_organization_name(self, host_organization_name):
        """Sets the host_organization_name of this Source.
        The display name of the host organization
        :param host_organization_name: The host_organization_name of this Source.
        :type: str.
        """
        self._host_organization_name = host_organization_name

    @property
    def host_organization_lineage(self):
        """Gets the host_organization_lineage of this Source.
        Lineage of host organizations
        :return: The host_organization_lineage of this Source.
        :rtype: list[str].
        """
        return self._host_organization_lineage

    @host_organization_lineage.setter
    def host_organization_lineage(self, host_organization_lineage):
        """Sets the host_organization_lineage of this Source.
        Lineage of host organizations
        :param host_organization_lineage: The host_organization_lineage of this Source.
        :type: list[str].
        """
        self._host_organization_lineage = host_organization_lineage

    @property
    def works_count(self):
        """Gets the works_count of this Source.
        Total number of works hosted by this source
        :return: The works_count of this Source.
        :rtype: int.
        """
        return self._works_count

    @works_count.setter
    def works_count(self, works_count):
        """Sets the works_count of this Source.
        Total number of works hosted by this source
        :param works_count: The works_count of this Source.
        :type: int.
        """
        self._works_count = works_count

    @property
    def cited_by_count(self):
        """Gets the cited_by_count of this Source.
        Total citations to works in this source
        :return: The cited_by_count of this Source.
        :rtype: int.
        """
        return self._cited_by_count

    @cited_by_count.setter
    def cited_by_count(self, cited_by_count):
        """Sets the cited_by_count of this Source.
        Total citations to works in this source
        :param cited_by_count: The cited_by_count of this Source.
        :type: int.
        """
        self._cited_by_count = cited_by_count

    @property
    def summary_stats(self):
        """Gets the summary_stats of this Source.
        :return: The summary_stats of this Source.
        :rtype: SummaryStats.
        """
        return self._summary_stats

    @summary_stats.setter
    def summary_stats(self, summary_stats):
        """Sets the summary_stats of this Source.
        :param summary_stats: The summary_stats of this Source.
        :type: SummaryStats.
        """
        self._summary_stats = summary_stats

    @property
    def is_oa(self):
        """Gets the is_oa of this Source.
        Whether this is currently an open access source
        :return: The is_oa of this Source.
        :rtype: bool.
        """
        return self._is_oa

    @is_oa.setter
    def is_oa(self, is_oa):
        """Sets the is_oa of this Source.
        Whether this is currently an open access source
        :param is_oa: The is_oa of this Source.
        :type: bool.
        """
        self._is_oa = is_oa

    @property
    def is_in_doaj(self):
        """Gets the is_in_doaj of this Source.
        Whether this source is in DOAJ
        :return: The is_in_doaj of this Source.
        :rtype: bool.
        """
        return self._is_in_doaj

    @is_in_doaj.setter
    def is_in_doaj(self, is_in_doaj):
        """Sets the is_in_doaj of this Source.
        Whether this source is in DOAJ
        :param is_in_doaj: The is_in_doaj of this Source.
        :type: bool.
        """
        self._is_in_doaj = is_in_doaj

    @property
    def is_core(self):
        """Gets the is_core of this Source.
        Whether this source is identified as a core source by CWTS
        :return: The is_core of this Source.
        :rtype: bool.
        """
        return self._is_core

    @is_core.setter
    def is_core(self, is_core):
        """Sets the is_core of this Source.
        Whether this source is identified as a core source by CWTS
        :param is_core: The is_core of this Source.
        :type: bool.
        """
        self._is_core = is_core

    @property
    def type(self):
        """Gets the type of this Source.
        The type of source
        :return: The type of this Source.
        :rtype: str.
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Source.
        The type of source
        :param type: The type of this Source.
        :type: str.
        """
        allowed_values = [
            "journal",
            "repository",
            "conference",
            "ebook-platform",
            "book-series",
            "metadata",
            "other",
        ]
        if type not in allowed_values:
            raise ValueError(
                f"Invalid value for `type` ({type}), must be one of {allowed_values}"
            )
        self._type = type

    @property
    def homepage_url(self):
        """Gets the homepage_url of this Source.
        The homepage URL for this source
        :return: The homepage_url of this Source.
        :rtype: str.
        """
        return self._homepage_url

    @homepage_url.setter
    def homepage_url(self, homepage_url):
        """Sets the homepage_url of this Source.
        The homepage URL for this source
        :param homepage_url: The homepage_url of this Source.
        :type: str.
        """
        self._homepage_url = homepage_url

    @property
    def apc_prices(self):
        """Gets the apc_prices of this Source.
        Article processing charge prices
        :return: The apc_prices of this Source.
        :rtype: list[SourceApcPrices].
        """
        return self._apc_prices

    @apc_prices.setter
    def apc_prices(self, apc_prices):
        """Sets the apc_prices of this Source.
        Article processing charge prices
        :param apc_prices: The apc_prices of this Source.
        :type: list[SourceApcPrices].
        """
        self._apc_prices = apc_prices

    @property
    def apc_usd(self):
        """Gets the apc_usd of this Source.
        The APC in USD (if available)
        :return: The apc_usd of this Source.
        :rtype: int.
        """
        return self._apc_usd

    @apc_usd.setter
    def apc_usd(self, apc_usd):
        """Sets the apc_usd of this Source.
        The APC in USD (if available)
        :param apc_usd: The apc_usd of this Source.
        :type: int.
        """
        self._apc_usd = apc_usd

    @property
    def country_code(self):
        """Gets the country_code of this Source.
        Two-letter ISO country code
        :return: The country_code of this Source.
        :rtype: str.
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Source.
        Two-letter ISO country code
        :param country_code: The country_code of this Source.
        :type: str.
        """
        self._country_code = country_code

    @property
    def societies(self):
        """Gets the societies of this Source.
        :return: The societies of this Source.
        :rtype: list[SourceSocieties].
        """
        return self._societies

    @societies.setter
    def societies(self, societies):
        """Sets the societies of this Source.
        :param societies: The societies of this Source.
        :type: list[SourceSocieties].
        """
        self._societies = societies

    @property
    def alternate_titles(self):
        """Gets the alternate_titles of this Source.
        Alternate titles for this source
        :return: The alternate_titles of this Source.
        :rtype: list[str].
        """
        return self._alternate_titles

    @alternate_titles.setter
    def alternate_titles(self, alternate_titles):
        """Sets the alternate_titles of this Source.
        Alternate titles for this source
        :param alternate_titles: The alternate_titles of this Source.
        :type: list[str].
        """
        self._alternate_titles = alternate_titles

    @property
    def abbreviated_title(self):
        """Gets the abbreviated_title of this Source.
        Abbreviated title from ISSN Centre
        :return: The abbreviated_title of this Source.
        :rtype: str.
        """
        return self._abbreviated_title

    @abbreviated_title.setter
    def abbreviated_title(self, abbreviated_title):
        """Sets the abbreviated_title of this Source.
        Abbreviated title from ISSN Centre
        :param abbreviated_title: The abbreviated_title of this Source.
        :type: str.
        """
        self._abbreviated_title = abbreviated_title

    @property
    def x_concepts(self):
        """Gets the x_concepts of this Source.
        :return: The x_concepts of this Source.
        :rtype: list[DehydratedConcept].
        """
        return self._x_concepts

    @x_concepts.setter
    def x_concepts(self, x_concepts):
        """Sets the x_concepts of this Source.
        :param x_concepts: The x_concepts of this Source.
        :type: list[DehydratedConcept].
        """
        self._x_concepts = x_concepts

    @property
    def counts_by_year(self):
        """Gets the counts_by_year of this Source.
        :return: The counts_by_year of this Source.
        :rtype: CountsByYear.
        """
        return self._counts_by_year

    @counts_by_year.setter
    def counts_by_year(self, counts_by_year):
        """Sets the counts_by_year of this Source.
        :param counts_by_year: The counts_by_year of this Source.
        :type: CountsByYear.
        """
        self._counts_by_year = counts_by_year

    @property
    def works_api_url(self):
        """Gets the works_api_url of this Source.
        :return: The works_api_url of this Source.
        :rtype: str.
        """
        return self._works_api_url

    @works_api_url.setter
    def works_api_url(self, works_api_url):
        """Sets the works_api_url of this Source.
        :param works_api_url: The works_api_url of this Source.
        :type: str.
        """
        self._works_api_url = works_api_url

    @property
    def updated_date(self):
        """Gets the updated_date of this Source.
        :return: The updated_date of this Source.
        :rtype: datetime.
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this Source.
        :param updated_date: The updated_date of this Source.
        :type: datetime.
        """
        self._updated_date = updated_date

    @property
    def created_date(self):
        """Gets the created_date of this Source.
        :return: The created_date of this Source.
        :rtype: date.
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this Source.
        :param created_date: The created_date of this Source.
        :type: date.
        """
        self._created_date = created_date

    @property
    def ids(self):
        """Gets the ids of this Source.
        :return: The ids of this Source.
        :rtype: SourceIds.
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this Source.
        :param ids: The ids of this Source.
        :type: SourceIds.
        """
        self._ids = ids

    def to_dict(self):
        """Returns the model properties as a dict."""
        result = {}
        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = [x.to_dict() if hasattr(x, "to_dict") else x for x in value]
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(Source, dict):
            for key, value in self.items():
                result[key] = value
        return result

    def to_str(self):
        """Returns the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal."""
        if not isinstance(other, Source):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal."""
        return not self == other

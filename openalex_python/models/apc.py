"""OpenAlex API
OpenAlex is a fully open catalog of the global research system. It's named after the ancient Library of Alexandria and made by the nonprofit OurResearch.  The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day.  For best performance, add your email to all API requests to join the polite pool using either: - The `mailto` query parameter (e.g., `mailto=you@example.com`) - The `User-Agent` header with mailto (e.g., `User-Agent: MyApp/1.0 (mailto:you@example.com)`)  Premium users get an API key which grants higher API limits and access to special filters.
OpenAPI spec version: 1.0.0
Generated by: https://github.com/swagger-api/swagger-codegen.git.
"""

import pprint

import six


class APC:
    """NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "value": "int",
        "currency": "str",
        "value_usd": "int",
        "provenance": "str",
    }
    attribute_map = {
        "value": "value",
        "currency": "currency",
        "value_usd": "value_usd",
        "provenance": "provenance",
    }

    def __init__(self, value=None, currency=None, value_usd=None, provenance=None):
        """APC - a model defined in Swagger."""
        self._value = None
        self._currency = None
        self._value_usd = None
        self._provenance = None
        self.discriminator = None
        self.value = value
        self.currency = currency
        if value_usd is not None:
            self.value_usd = value_usd
        if provenance is not None:
            self.provenance = provenance

    @property
    def value(self):
        """Gets the value of this APC.
        The APC value
        :return: The value of this APC.
        :rtype: int.
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this APC.
        The APC value
        :param value: The value of this APC.
        :type: int.
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")
        self._value = value

    @property
    def currency(self):
        """Gets the currency of this APC.
        The currency code
        :return: The currency of this APC.
        :rtype: str.
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this APC.
        The currency code
        :param currency: The currency of this APC.
        :type: str.
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")
        self._currency = currency

    @property
    def value_usd(self):
        """Gets the value_usd of this APC.
        The APC value in USD
        :return: The value_usd of this APC.
        :rtype: int.
        """
        return self._value_usd

    @value_usd.setter
    def value_usd(self, value_usd):
        """Sets the value_usd of this APC.
        The APC value in USD
        :param value_usd: The value_usd of this APC.
        :type: int.
        """
        self._value_usd = value_usd

    @property
    def provenance(self):
        """Gets the provenance of this APC.
        Where this APC information came from
        :return: The provenance of this APC.
        :rtype: str.
        """
        return self._provenance

    @provenance.setter
    def provenance(self, provenance):
        """Sets the provenance of this APC.
        Where this APC information came from
        :param provenance: The provenance of this APC.
        :type: str.
        """
        self._provenance = provenance

    def to_dict(self):
        """Returns the model properties as a dict."""
        result = {}
        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = [x.to_dict() if hasattr(x, "to_dict") else x for x in value]
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(APC, dict):
            for key, value in self.items():
                result[key] = value
        return result

    def to_str(self):
        """Returns the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal."""
        if not isinstance(other, APC):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal."""
        return not self == other

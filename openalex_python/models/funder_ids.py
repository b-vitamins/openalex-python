"""OpenAlex API
OpenAlex is a fully open catalog of the global research system. It's named after the ancient Library of Alexandria and made by the nonprofit OurResearch.  The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day.  For best performance, add your email to all API requests to join the polite pool using either: - The `mailto` query parameter (e.g., `mailto=you@example.com`) - The `User-Agent` header with mailto (e.g., `User-Agent: MyApp/1.0 (mailto:you@example.com)`)  Premium users get an API key which grants higher API limits and access to special filters.
OpenAPI spec version: 1.0.0
Generated by: https://github.com/swagger-api/swagger-codegen.git.
"""

import pprint

import six


class FunderIds:
    """NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "openalex": "str",
        "ror": "str",
        "wikidata": "str",
        "crossref": "str",
        "doi": "str",
    }
    attribute_map = {
        "openalex": "openalex",
        "ror": "ror",
        "wikidata": "wikidata",
        "crossref": "crossref",
        "doi": "doi",
    }

    def __init__(self, openalex=None, ror=None, wikidata=None, crossref=None, doi=None):
        """FunderIds - a model defined in Swagger."""
        self._openalex = None
        self._ror = None
        self._wikidata = None
        self._crossref = None
        self._doi = None
        self.discriminator = None
        self.openalex = openalex
        if ror is not None:
            self.ror = ror
        if wikidata is not None:
            self.wikidata = wikidata
        if crossref is not None:
            self.crossref = crossref
        if doi is not None:
            self.doi = doi

    @property
    def openalex(self):
        """Gets the openalex of this FunderIds.
        :return: The openalex of this FunderIds.
        :rtype: str.
        """
        return self._openalex

    @openalex.setter
    def openalex(self, openalex):
        """Sets the openalex of this FunderIds.
        :param openalex: The openalex of this FunderIds.
        :type: str.
        """
        if openalex is None:
            raise ValueError("Invalid value for `openalex`, must not be `None`")
        self._openalex = openalex

    @property
    def ror(self):
        """Gets the ror of this FunderIds.
        :return: The ror of this FunderIds.
        :rtype: str.
        """
        return self._ror

    @ror.setter
    def ror(self, ror):
        """Sets the ror of this FunderIds.
        :param ror: The ror of this FunderIds.
        :type: str.
        """
        self._ror = ror

    @property
    def wikidata(self):
        """Gets the wikidata of this FunderIds.
        :return: The wikidata of this FunderIds.
        :rtype: str.
        """
        return self._wikidata

    @wikidata.setter
    def wikidata(self, wikidata):
        """Sets the wikidata of this FunderIds.
        :param wikidata: The wikidata of this FunderIds.
        :type: str.
        """
        self._wikidata = wikidata

    @property
    def crossref(self):
        """Gets the crossref of this FunderIds.
        :return: The crossref of this FunderIds.
        :rtype: str.
        """
        return self._crossref

    @crossref.setter
    def crossref(self, crossref):
        """Sets the crossref of this FunderIds.
        :param crossref: The crossref of this FunderIds.
        :type: str.
        """
        self._crossref = crossref

    @property
    def doi(self):
        """Gets the doi of this FunderIds.
        :return: The doi of this FunderIds.
        :rtype: str.
        """
        return self._doi

    @doi.setter
    def doi(self, doi):
        """Sets the doi of this FunderIds.
        :param doi: The doi of this FunderIds.
        :type: str.
        """
        self._doi = doi

    def to_dict(self):
        """Returns the model properties as a dict."""
        result = {}
        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = [x.to_dict() if hasattr(x, "to_dict") else x for x in value]
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(FunderIds, dict):
            for key, value in self.items():
                result[key] = value
        return result

    def to_str(self):
        """Returns the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal."""
        if not isinstance(other, FunderIds):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal."""
        return not self == other

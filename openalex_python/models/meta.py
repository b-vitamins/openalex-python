"""OpenAlex API
OpenAlex is a fully open catalog of the global research system. It's named after the ancient Library of Alexandria and made by the nonprofit OurResearch.  The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day.  For best performance, add your email to all API requests to join the polite pool using either: - The `mailto` query parameter (e.g., `mailto=you@example.com`) - The `User-Agent` header with mailto (e.g., `User-Agent: MyApp/1.0 (mailto:you@example.com)`)  Premium users get an API key which grants higher API limits and access to special filters.
OpenAPI spec version: 1.0.0
Generated by: https://github.com/swagger-api/swagger-codegen.git.
"""

import pprint

import six


class Meta:
    """NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "count": "int",
        "db_response_time_ms": "int",
        "page": "int",
        "per_page": "int",
        "groups_count": "int",
        "next_cursor": "str",
    }
    attribute_map = {
        "count": "count",
        "db_response_time_ms": "db_response_time_ms",
        "page": "page",
        "per_page": "per_page",
        "groups_count": "groups_count",
        "next_cursor": "next_cursor",
    }

    def __init__(
        self,
        count=None,
        db_response_time_ms=None,
        page=None,
        per_page=None,
        groups_count=None,
        next_cursor=None,
    ):
        """Meta - a model defined in Swagger."""
        self._count = None
        self._db_response_time_ms = None
        self._page = None
        self._per_page = None
        self._groups_count = None
        self._next_cursor = None
        self.discriminator = None
        self.count = count
        self.db_response_time_ms = db_response_time_ms
        self.page = page
        self.per_page = per_page
        if groups_count is not None:
            self.groups_count = groups_count
        if next_cursor is not None:
            self.next_cursor = next_cursor

    @property
    def count(self):
        """Gets the count of this Meta.
        Total number of results
        :return: The count of this Meta.
        :rtype: int.
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Meta.
        Total number of results
        :param count: The count of this Meta.
        :type: int.
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")
        self._count = count

    @property
    def db_response_time_ms(self):
        """Gets the db_response_time_ms of this Meta.
        Database response time in milliseconds
        :return: The db_response_time_ms of this Meta.
        :rtype: int.
        """
        return self._db_response_time_ms

    @db_response_time_ms.setter
    def db_response_time_ms(self, db_response_time_ms):
        """Sets the db_response_time_ms of this Meta.
        Database response time in milliseconds
        :param db_response_time_ms: The db_response_time_ms of this Meta.
        :type: int.
        """
        if db_response_time_ms is None:
            raise ValueError(
                "Invalid value for `db_response_time_ms`, must not be `None`"
            )
        self._db_response_time_ms = db_response_time_ms

    @property
    def page(self):
        """Gets the page of this Meta.
        Current page number (null for cursor pagination)
        :return: The page of this Meta.
        :rtype: int.
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this Meta.
        Current page number (null for cursor pagination)
        :param page: The page of this Meta.
        :type: int.
        """
        if page is None:
            raise ValueError("Invalid value for `page`, must not be `None`")
        self._page = page

    @property
    def per_page(self):
        """Gets the per_page of this Meta.
        Number of results per page
        :return: The per_page of this Meta.
        :rtype: int.
        """
        return self._per_page

    @per_page.setter
    def per_page(self, per_page):
        """Sets the per_page of this Meta.
        Number of results per page
        :param per_page: The per_page of this Meta.
        :type: int.
        """
        if per_page is None:
            raise ValueError("Invalid value for `per_page`, must not be `None`")
        self._per_page = per_page

    @property
    def groups_count(self):
        """Gets the groups_count of this Meta.
        Number of groups when using group_by (only current page)
        :return: The groups_count of this Meta.
        :rtype: int.
        """
        return self._groups_count

    @groups_count.setter
    def groups_count(self, groups_count):
        """Sets the groups_count of this Meta.
        Number of groups when using group_by (only current page)
        :param groups_count: The groups_count of this Meta.
        :type: int.
        """
        self._groups_count = groups_count

    @property
    def next_cursor(self):
        """Gets the next_cursor of this Meta.
        Cursor for next page when using cursor pagination
        :return: The next_cursor of this Meta.
        :rtype: str.
        """
        return self._next_cursor

    @next_cursor.setter
    def next_cursor(self, next_cursor):
        """Sets the next_cursor of this Meta.
        Cursor for next page when using cursor pagination
        :param next_cursor: The next_cursor of this Meta.
        :type: str.
        """
        self._next_cursor = next_cursor

    def to_dict(self):
        """Returns the model properties as a dict."""
        result = {}
        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = [x.to_dict() if hasattr(x, "to_dict") else x for x in value]
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(Meta, dict):
            for key, value in self.items():
                result[key] = value
        return result

    def to_str(self):
        """Returns the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal."""
        if not isinstance(other, Meta):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal."""
        return not self == other

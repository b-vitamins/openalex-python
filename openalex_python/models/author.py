"""OpenAlex API
OpenAlex is a fully open catalog of the global research system. It's named after the ancient Library of Alexandria and made by the nonprofit OurResearch.  The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day.  For best performance, add your email to all API requests to join the polite pool using either: - The `mailto` query parameter (e.g., `mailto=you@example.com`) - The `User-Agent` header with mailto (e.g., `User-Agent: MyApp/1.0 (mailto:you@example.com)`)  Premium users get an API key which grants higher API limits and access to special filters.
OpenAPI spec version: 1.0.0
Generated by: https://github.com/swagger-api/swagger-codegen.git.
"""

import pprint

import six


class Author:
    """NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "id": "str",
        "orcid": "str",
        "display_name": "str",
        "display_name_alternatives": "list[str]",
        "works_count": "int",
        "cited_by_count": "int",
        "summary_stats": "SummaryStats",
        "affiliations": "list[AuthorAffiliations]",
        "last_known_institutions": "list[DehydratedInstitution]",
        "x_concepts": "list[DehydratedConcept]",
        "counts_by_year": "CountsByYear",
        "works_api_url": "str",
        "updated_date": "datetime",
        "created_date": "date",
        "ids": "AuthorIds",
    }
    attribute_map = {
        "id": "id",
        "orcid": "orcid",
        "display_name": "display_name",
        "display_name_alternatives": "display_name_alternatives",
        "works_count": "works_count",
        "cited_by_count": "cited_by_count",
        "summary_stats": "summary_stats",
        "affiliations": "affiliations",
        "last_known_institutions": "last_known_institutions",
        "x_concepts": "x_concepts",
        "counts_by_year": "counts_by_year",
        "works_api_url": "works_api_url",
        "updated_date": "updated_date",
        "created_date": "created_date",
        "ids": "ids",
    }

    def __init__(
        self,
        id=None,
        orcid=None,
        display_name=None,
        display_name_alternatives=None,
        works_count=None,
        cited_by_count=None,
        summary_stats=None,
        affiliations=None,
        last_known_institutions=None,
        x_concepts=None,
        counts_by_year=None,
        works_api_url=None,
        updated_date=None,
        created_date=None,
        ids=None,
    ):
        """Author - a model defined in Swagger."""
        self._id = None
        self._orcid = None
        self._display_name = None
        self._display_name_alternatives = None
        self._works_count = None
        self._cited_by_count = None
        self._summary_stats = None
        self._affiliations = None
        self._last_known_institutions = None
        self._x_concepts = None
        self._counts_by_year = None
        self._works_api_url = None
        self._updated_date = None
        self._created_date = None
        self._ids = None
        self.discriminator = None
        self.id = id
        if orcid is not None:
            self.orcid = orcid
        self.display_name = display_name
        if display_name_alternatives is not None:
            self.display_name_alternatives = display_name_alternatives
        if works_count is not None:
            self.works_count = works_count
        if cited_by_count is not None:
            self.cited_by_count = cited_by_count
        if summary_stats is not None:
            self.summary_stats = summary_stats
        if affiliations is not None:
            self.affiliations = affiliations
        if last_known_institutions is not None:
            self.last_known_institutions = last_known_institutions
        if x_concepts is not None:
            self.x_concepts = x_concepts
        if counts_by_year is not None:
            self.counts_by_year = counts_by_year
        if works_api_url is not None:
            self.works_api_url = works_api_url
        if updated_date is not None:
            self.updated_date = updated_date
        if created_date is not None:
            self.created_date = created_date
        if ids is not None:
            self.ids = ids

    @property
    def id(self):
        """Gets the id of this Author.
        :return: The id of this Author.
        :rtype: str.
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Author.
        :param id: The id of this Author.
        :type: str.
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        self._id = id

    @property
    def orcid(self):
        """Gets the orcid of this Author.
        :return: The orcid of this Author.
        :rtype: str.
        """
        return self._orcid

    @orcid.setter
    def orcid(self, orcid):
        """Sets the orcid of this Author.
        :param orcid: The orcid of this Author.
        :type: str.
        """
        self._orcid = orcid

    @property
    def display_name(self):
        """Gets the display_name of this Author.
        :return: The display_name of this Author.
        :rtype: str.
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Author.
        :param display_name: The display_name of this Author.
        :type: str.
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")
        self._display_name = display_name

    @property
    def display_name_alternatives(self):
        """Gets the display_name_alternatives of this Author.
        Other names the author publishes under
        :return: The display_name_alternatives of this Author.
        :rtype: list[str].
        """
        return self._display_name_alternatives

    @display_name_alternatives.setter
    def display_name_alternatives(self, display_name_alternatives):
        """Sets the display_name_alternatives of this Author.
        Other names the author publishes under
        :param display_name_alternatives: The display_name_alternatives of this Author.
        :type: list[str].
        """
        self._display_name_alternatives = display_name_alternatives

    @property
    def works_count(self):
        """Gets the works_count of this Author.
        Total number of works
        :return: The works_count of this Author.
        :rtype: int.
        """
        return self._works_count

    @works_count.setter
    def works_count(self, works_count):
        """Sets the works_count of this Author.
        Total number of works
        :param works_count: The works_count of this Author.
        :type: int.
        """
        self._works_count = works_count

    @property
    def cited_by_count(self):
        """Gets the cited_by_count of this Author.
        Total citation count
        :return: The cited_by_count of this Author.
        :rtype: int.
        """
        return self._cited_by_count

    @cited_by_count.setter
    def cited_by_count(self, cited_by_count):
        """Sets the cited_by_count of this Author.
        Total citation count
        :param cited_by_count: The cited_by_count of this Author.
        :type: int.
        """
        self._cited_by_count = cited_by_count

    @property
    def summary_stats(self):
        """Gets the summary_stats of this Author.
        :return: The summary_stats of this Author.
        :rtype: SummaryStats.
        """
        return self._summary_stats

    @summary_stats.setter
    def summary_stats(self, summary_stats):
        """Sets the summary_stats of this Author.
        :param summary_stats: The summary_stats of this Author.
        :type: SummaryStats.
        """
        self._summary_stats = summary_stats

    @property
    def affiliations(self):
        """Gets the affiliations of this Author.
        :return: The affiliations of this Author.
        :rtype: list[AuthorAffiliations].
        """
        return self._affiliations

    @affiliations.setter
    def affiliations(self, affiliations):
        """Sets the affiliations of this Author.
        :param affiliations: The affiliations of this Author.
        :type: list[AuthorAffiliations].
        """
        self._affiliations = affiliations

    @property
    def last_known_institutions(self):
        """Gets the last_known_institutions of this Author.
        Most recent institutional affiliations
        :return: The last_known_institutions of this Author.
        :rtype: list[DehydratedInstitution].
        """
        return self._last_known_institutions

    @last_known_institutions.setter
    def last_known_institutions(self, last_known_institutions):
        """Sets the last_known_institutions of this Author.
        Most recent institutional affiliations
        :param last_known_institutions: The last_known_institutions of this Author.
        :type: list[DehydratedInstitution].
        """
        self._last_known_institutions = last_known_institutions

    @property
    def x_concepts(self):
        """Gets the x_concepts of this Author.
        Deprecated in favor of topics
        :return: The x_concepts of this Author.
        :rtype: list[DehydratedConcept].
        """
        return self._x_concepts

    @x_concepts.setter
    def x_concepts(self, x_concepts):
        """Sets the x_concepts of this Author.
        Deprecated in favor of topics
        :param x_concepts: The x_concepts of this Author.
        :type: list[DehydratedConcept].
        """
        self._x_concepts = x_concepts

    @property
    def counts_by_year(self):
        """Gets the counts_by_year of this Author.
        :return: The counts_by_year of this Author.
        :rtype: CountsByYear.
        """
        return self._counts_by_year

    @counts_by_year.setter
    def counts_by_year(self, counts_by_year):
        """Sets the counts_by_year of this Author.
        :param counts_by_year: The counts_by_year of this Author.
        :type: CountsByYear.
        """
        self._counts_by_year = counts_by_year

    @property
    def works_api_url(self):
        """Gets the works_api_url of this Author.
        API URL to get all works by this author
        :return: The works_api_url of this Author.
        :rtype: str.
        """
        return self._works_api_url

    @works_api_url.setter
    def works_api_url(self, works_api_url):
        """Sets the works_api_url of this Author.
        API URL to get all works by this author
        :param works_api_url: The works_api_url of this Author.
        :type: str.
        """
        self._works_api_url = works_api_url

    @property
    def updated_date(self):
        """Gets the updated_date of this Author.
        :return: The updated_date of this Author.
        :rtype: datetime.
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this Author.
        :param updated_date: The updated_date of this Author.
        :type: datetime.
        """
        self._updated_date = updated_date

    @property
    def created_date(self):
        """Gets the created_date of this Author.
        :return: The created_date of this Author.
        :rtype: date.
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this Author.
        :param created_date: The created_date of this Author.
        :type: date.
        """
        self._created_date = created_date

    @property
    def ids(self):
        """Gets the ids of this Author.
        :return: The ids of this Author.
        :rtype: AuthorIds.
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this Author.
        :param ids: The ids of this Author.
        :type: AuthorIds.
        """
        self._ids = ids

    def to_dict(self):
        """Returns the model properties as a dict."""
        result = {}
        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = [x.to_dict() if hasattr(x, "to_dict") else x for x in value]
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(Author, dict):
            for key, value in self.items():
                result[key] = value
        return result

    def to_str(self):
        """Returns the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal."""
        if not isinstance(other, Author):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal."""
        return not self == other

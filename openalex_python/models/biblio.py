"""OpenAlex API
OpenAlex is a fully open catalog of the global research system. It's named after the ancient Library of Alexandria and made by the nonprofit OurResearch.  The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day.  For best performance, add your email to all API requests to join the polite pool using either: - The `mailto` query parameter (e.g., `mailto=you@example.com`) - The `User-Agent` header with mailto (e.g., `User-Agent: MyApp/1.0 (mailto:you@example.com)`)  Premium users get an API key which grants higher API limits and access to special filters.
OpenAPI spec version: 1.0.0
Generated by: https://github.com/swagger-api/swagger-codegen.git.
"""

import pprint

import six


class Biblio:
    """NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "volume": "str",
        "issue": "str",
        "first_page": "str",
        "last_page": "str",
    }
    attribute_map = {
        "volume": "volume",
        "issue": "issue",
        "first_page": "first_page",
        "last_page": "last_page",
    }

    def __init__(self, volume=None, issue=None, first_page=None, last_page=None):
        """Biblio - a model defined in Swagger."""
        self._volume = None
        self._issue = None
        self._first_page = None
        self._last_page = None
        self.discriminator = None
        if volume is not None:
            self.volume = volume
        if issue is not None:
            self.issue = issue
        if first_page is not None:
            self.first_page = first_page
        if last_page is not None:
            self.last_page = last_page

    @property
    def volume(self):
        """Gets the volume of this Biblio.
        :return: The volume of this Biblio.
        :rtype: str.
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this Biblio.
        :param volume: The volume of this Biblio.
        :type: str.
        """
        self._volume = volume

    @property
    def issue(self):
        """Gets the issue of this Biblio.
        :return: The issue of this Biblio.
        :rtype: str.
        """
        return self._issue

    @issue.setter
    def issue(self, issue):
        """Sets the issue of this Biblio.
        :param issue: The issue of this Biblio.
        :type: str.
        """
        self._issue = issue

    @property
    def first_page(self):
        """Gets the first_page of this Biblio.
        :return: The first_page of this Biblio.
        :rtype: str.
        """
        return self._first_page

    @first_page.setter
    def first_page(self, first_page):
        """Sets the first_page of this Biblio.
        :param first_page: The first_page of this Biblio.
        :type: str.
        """
        self._first_page = first_page

    @property
    def last_page(self):
        """Gets the last_page of this Biblio.
        :return: The last_page of this Biblio.
        :rtype: str.
        """
        return self._last_page

    @last_page.setter
    def last_page(self, last_page):
        """Sets the last_page of this Biblio.
        :param last_page: The last_page of this Biblio.
        :type: str.
        """
        self._last_page = last_page

    def to_dict(self):
        """Returns the model properties as a dict."""
        result = {}
        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = [x.to_dict() if hasattr(x, "to_dict") else x for x in value]
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(Biblio, dict):
            for key, value in self.items():
                result[key] = value
        return result

    def to_str(self):
        """Returns the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal."""
        if not isinstance(other, Biblio):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal."""
        return not self == other

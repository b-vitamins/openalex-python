"""OpenAlex API
OpenAlex is a fully open catalog of the global research system. It's named after the ancient Library of Alexandria and made by the nonprofit OurResearch.  The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day.  For best performance, add your email to all API requests to join the polite pool using either: - The `mailto` query parameter (e.g., `mailto=you@example.com`) - The `User-Agent` header with mailto (e.g., `User-Agent: MyApp/1.0 (mailto:you@example.com)`)  Premium users get an API key which grants higher API limits and access to special filters.
OpenAPI spec version: 1.0.0
Generated by: https://github.com/swagger-api/swagger-codegen.git.
"""

import pprint

import six


class Location:
    """NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "is_oa": "bool",
        "landing_page_url": "str",
        "pdf_url": "str",
        "source": "DehydratedSource",
        "license": "str",
        "license_id": "str",
        "version": "str",
        "is_accepted": "bool",
        "is_published": "bool",
    }
    attribute_map = {
        "is_oa": "is_oa",
        "landing_page_url": "landing_page_url",
        "pdf_url": "pdf_url",
        "source": "source",
        "license": "license",
        "license_id": "license_id",
        "version": "version",
        "is_accepted": "is_accepted",
        "is_published": "is_published",
    }

    def __init__(
        self,
        is_oa=None,
        landing_page_url=None,
        pdf_url=None,
        source=None,
        license=None,
        license_id=None,
        version=None,
        is_accepted=None,
        is_published=None,
    ):
        """Location - a model defined in Swagger."""
        self._is_oa = None
        self._landing_page_url = None
        self._pdf_url = None
        self._source = None
        self._license = None
        self._license_id = None
        self._version = None
        self._is_accepted = None
        self._is_published = None
        self.discriminator = None
        if is_oa is not None:
            self.is_oa = is_oa
        if landing_page_url is not None:
            self.landing_page_url = landing_page_url
        if pdf_url is not None:
            self.pdf_url = pdf_url
        if source is not None:
            self.source = source
        if license is not None:
            self.license = license
        if license_id is not None:
            self.license_id = license_id
        if version is not None:
            self.version = version
        if is_accepted is not None:
            self.is_accepted = is_accepted
        if is_published is not None:
            self.is_published = is_published

    @property
    def is_oa(self):
        """Gets the is_oa of this Location.
        Whether this location is Open Access
        :return: The is_oa of this Location.
        :rtype: bool.
        """
        return self._is_oa

    @is_oa.setter
    def is_oa(self, is_oa):
        """Sets the is_oa of this Location.
        Whether this location is Open Access
        :param is_oa: The is_oa of this Location.
        :type: bool.
        """
        self._is_oa = is_oa

    @property
    def landing_page_url(self):
        """Gets the landing_page_url of this Location.
        URL where you can view this work on the web
        :return: The landing_page_url of this Location.
        :rtype: str.
        """
        return self._landing_page_url

    @landing_page_url.setter
    def landing_page_url(self, landing_page_url):
        """Sets the landing_page_url of this Location.
        URL where you can view this work on the web
        :param landing_page_url: The landing_page_url of this Location.
        :type: str.
        """
        self._landing_page_url = landing_page_url

    @property
    def pdf_url(self):
        """Gets the pdf_url of this Location.
        URL where you can find the PDF for this work
        :return: The pdf_url of this Location.
        :rtype: str.
        """
        return self._pdf_url

    @pdf_url.setter
    def pdf_url(self, pdf_url):
        """Sets the pdf_url of this Location.
        URL where you can find the PDF for this work
        :param pdf_url: The pdf_url of this Location.
        :type: str.
        """
        self._pdf_url = pdf_url

    @property
    def source(self):
        """Gets the source of this Location.
        :return: The source of this Location.
        :rtype: DehydratedSource.
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Location.
        :param source: The source of this Location.
        :type: DehydratedSource.
        """
        self._source = source

    @property
    def license(self):
        """Gets the license of this Location.
        The license applied to this work at this host
        :return: The license of this Location.
        :rtype: str.
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this Location.
        The license applied to this work at this host
        :param license: The license of this Location.
        :type: str.
        """
        self._license = license

    @property
    def license_id(self):
        """Gets the license_id of this Location.
        The license ID
        :return: The license_id of this Location.
        :rtype: str.
        """
        return self._license_id

    @license_id.setter
    def license_id(self, license_id):
        """Sets the license_id of this Location.
        The license ID
        :param license_id: The license_id of this Location.
        :type: str.
        """
        self._license_id = license_id

    @property
    def version(self):
        """Gets the version of this Location.
        The version of the work
        :return: The version of this Location.
        :rtype: str.
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Location.
        The version of the work
        :param version: The version of this Location.
        :type: str.
        """
        allowed_values = ["publishedVersion", "acceptedVersion", "submittedVersion"]
        if version not in allowed_values:
            raise ValueError(
                f"Invalid value for `version` ({version}), must be one of {allowed_values}"
            )
        self._version = version

    @property
    def is_accepted(self):
        """Gets the is_accepted of this Location.
        Whether this is an accepted or published version
        :return: The is_accepted of this Location.
        :rtype: bool.
        """
        return self._is_accepted

    @is_accepted.setter
    def is_accepted(self, is_accepted):
        """Sets the is_accepted of this Location.
        Whether this is an accepted or published version
        :param is_accepted: The is_accepted of this Location.
        :type: bool.
        """
        self._is_accepted = is_accepted

    @property
    def is_published(self):
        """Gets the is_published of this Location.
        Whether this is a published version
        :return: The is_published of this Location.
        :rtype: bool.
        """
        return self._is_published

    @is_published.setter
    def is_published(self, is_published):
        """Sets the is_published of this Location.
        Whether this is a published version
        :param is_published: The is_published of this Location.
        :type: bool.
        """
        self._is_published = is_published

    def to_dict(self):
        """Returns the model properties as a dict."""
        result = {}
        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = [x.to_dict() if hasattr(x, "to_dict") else x for x in value]
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(Location, dict):
            for key, value in self.items():
                result[key] = value
        return result

    def to_str(self):
        """Returns the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal."""
        if not isinstance(other, Location):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal."""
        return not self == other

"""OpenAlex API
OpenAlex is a fully open catalog of the global research system. It's named after the ancient Library of Alexandria and made by the nonprofit OurResearch.  The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day.  For best performance, add your email to all API requests to join the polite pool using either: - The `mailto` query parameter (e.g., `mailto=you@example.com`) - The `User-Agent` header with mailto (e.g., `User-Agent: MyApp/1.0 (mailto:you@example.com)`)  Premium users get an API key which grants higher API limits and access to special filters.
OpenAPI spec version: 1.0.0
Generated by: https://github.com/swagger-api/swagger-codegen.git.
"""

import pprint

import six


class AssociatedInstitution:
    """NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "id": "str",
        "ror": "str",
        "display_name": "str",
        "country_code": "str",
        "type": "str",
        "relationship": "str",
    }
    attribute_map = {
        "id": "id",
        "ror": "ror",
        "display_name": "display_name",
        "country_code": "country_code",
        "type": "type",
        "relationship": "relationship",
    }

    def __init__(
        self,
        id=None,
        ror=None,
        display_name=None,
        country_code=None,
        type=None,
        relationship=None,
    ):
        """AssociatedInstitution - a model defined in Swagger."""
        self._id = None
        self._ror = None
        self._display_name = None
        self._country_code = None
        self._type = None
        self._relationship = None
        self.discriminator = None
        self.id = id
        if ror is not None:
            self.ror = ror
        self.display_name = display_name
        if country_code is not None:
            self.country_code = country_code
        if type is not None:
            self.type = type
        self.relationship = relationship

    @property
    def id(self):
        """Gets the id of this AssociatedInstitution.
        :return: The id of this AssociatedInstitution.
        :rtype: str.
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AssociatedInstitution.
        :param id: The id of this AssociatedInstitution.
        :type: str.
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        self._id = id

    @property
    def ror(self):
        """Gets the ror of this AssociatedInstitution.
        :return: The ror of this AssociatedInstitution.
        :rtype: str.
        """
        return self._ror

    @ror.setter
    def ror(self, ror):
        """Sets the ror of this AssociatedInstitution.
        :param ror: The ror of this AssociatedInstitution.
        :type: str.
        """
        self._ror = ror

    @property
    def display_name(self):
        """Gets the display_name of this AssociatedInstitution.
        :return: The display_name of this AssociatedInstitution.
        :rtype: str.
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AssociatedInstitution.
        :param display_name: The display_name of this AssociatedInstitution.
        :type: str.
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")
        self._display_name = display_name

    @property
    def country_code(self):
        """Gets the country_code of this AssociatedInstitution.
        :return: The country_code of this AssociatedInstitution.
        :rtype: str.
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this AssociatedInstitution.
        :param country_code: The country_code of this AssociatedInstitution.
        :type: str.
        """
        self._country_code = country_code

    @property
    def type(self):
        """Gets the type of this AssociatedInstitution.
        :return: The type of this AssociatedInstitution.
        :rtype: str.
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AssociatedInstitution.
        :param type: The type of this AssociatedInstitution.
        :type: str.
        """
        allowed_values = [
            "education",
            "healthcare",
            "company",
            "archive",
            "nonprofit",
            "government",
            "facility",
            "other",
        ]
        if type not in allowed_values:
            raise ValueError(
                f"Invalid value for `type` ({type}), must be one of {allowed_values}"
            )
        self._type = type

    @property
    def relationship(self):
        """Gets the relationship of this AssociatedInstitution.
        :return: The relationship of this AssociatedInstitution.
        :rtype: str.
        """
        return self._relationship

    @relationship.setter
    def relationship(self, relationship):
        """Sets the relationship of this AssociatedInstitution.
        :param relationship: The relationship of this AssociatedInstitution.
        :type: str.
        """
        if relationship is None:
            raise ValueError("Invalid value for `relationship`, must not be `None`")
        allowed_values = ["parent", "child", "related"]
        if relationship not in allowed_values:
            raise ValueError(
                f"Invalid value for `relationship` ({relationship}), must be one of {allowed_values}"
            )
        self._relationship = relationship

    def to_dict(self):
        """Returns the model properties as a dict."""
        result = {}
        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = [x.to_dict() if hasattr(x, "to_dict") else x for x in value]
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(AssociatedInstitution, dict):
            for key, value in self.items():
                result[key] = value
        return result

    def to_str(self):
        """Returns the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal."""
        if not isinstance(other, AssociatedInstitution):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal."""
        return not self == other

"""OpenAlex API
OpenAlex is a fully open catalog of the global research system. It's named after the ancient Library of Alexandria and made by the nonprofit OurResearch.  The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day.  For best performance, add your email to all API requests to join the polite pool using either: - The `mailto` query parameter (e.g., `mailto=you@example.com`) - The `User-Agent` header with mailto (e.g., `User-Agent: MyApp/1.0 (mailto:you@example.com)`)  Premium users get an API key which grants higher API limits and access to special filters.
OpenAPI spec version: 1.0.0
Generated by: https://github.com/swagger-api/swagger-codegen.git.
"""

import pprint

import six


class Repository:
    """NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "id": "str",
        "display_name": "str",
        "host_organization": "str",
        "host_organization_name": "str",
        "host_organization_lineage": "list[str]",
    }
    attribute_map = {
        "id": "id",
        "display_name": "display_name",
        "host_organization": "host_organization",
        "host_organization_name": "host_organization_name",
        "host_organization_lineage": "host_organization_lineage",
    }

    def __init__(
        self,
        id=None,
        display_name=None,
        host_organization=None,
        host_organization_name=None,
        host_organization_lineage=None,
    ):
        """Repository - a model defined in Swagger."""
        self._id = None
        self._display_name = None
        self._host_organization = None
        self._host_organization_name = None
        self._host_organization_lineage = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if display_name is not None:
            self.display_name = display_name
        if host_organization is not None:
            self.host_organization = host_organization
        if host_organization_name is not None:
            self.host_organization_name = host_organization_name
        if host_organization_lineage is not None:
            self.host_organization_lineage = host_organization_lineage

    @property
    def id(self):
        """Gets the id of this Repository.
        :return: The id of this Repository.
        :rtype: str.
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Repository.
        :param id: The id of this Repository.
        :type: str.
        """
        self._id = id

    @property
    def display_name(self):
        """Gets the display_name of this Repository.
        :return: The display_name of this Repository.
        :rtype: str.
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Repository.
        :param display_name: The display_name of this Repository.
        :type: str.
        """
        self._display_name = display_name

    @property
    def host_organization(self):
        """Gets the host_organization of this Repository.
        :return: The host_organization of this Repository.
        :rtype: str.
        """
        return self._host_organization

    @host_organization.setter
    def host_organization(self, host_organization):
        """Sets the host_organization of this Repository.
        :param host_organization: The host_organization of this Repository.
        :type: str.
        """
        self._host_organization = host_organization

    @property
    def host_organization_name(self):
        """Gets the host_organization_name of this Repository.
        :return: The host_organization_name of this Repository.
        :rtype: str.
        """
        return self._host_organization_name

    @host_organization_name.setter
    def host_organization_name(self, host_organization_name):
        """Sets the host_organization_name of this Repository.
        :param host_organization_name: The host_organization_name of this Repository.
        :type: str.
        """
        self._host_organization_name = host_organization_name

    @property
    def host_organization_lineage(self):
        """Gets the host_organization_lineage of this Repository.
        :return: The host_organization_lineage of this Repository.
        :rtype: list[str].
        """
        return self._host_organization_lineage

    @host_organization_lineage.setter
    def host_organization_lineage(self, host_organization_lineage):
        """Sets the host_organization_lineage of this Repository.
        :param host_organization_lineage: The host_organization_lineage of this Repository.
        :type: list[str].
        """
        self._host_organization_lineage = host_organization_lineage

    def to_dict(self):
        """Returns the model properties as a dict."""
        result = {}
        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = [x.to_dict() if hasattr(x, "to_dict") else x for x in value]
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(Repository, dict):
            for key, value in self.items():
                result[key] = value
        return result

    def to_str(self):
        """Returns the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal."""
        if not isinstance(other, Repository):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal."""
        return not self == other

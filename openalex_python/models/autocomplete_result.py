"""OpenAlex API
OpenAlex is a fully open catalog of the global research system. It's named after the ancient Library of Alexandria and made by the nonprofit OurResearch.  The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day.  For best performance, add your email to all API requests to join the polite pool using either: - The `mailto` query parameter (e.g., `mailto=you@example.com`) - The `User-Agent` header with mailto (e.g., `User-Agent: MyApp/1.0 (mailto:you@example.com)`)  Premium users get an API key which grants higher API limits and access to special filters.
OpenAPI spec version: 1.0.0
Generated by: https://github.com/swagger-api/swagger-codegen.git.
"""

import pprint

import six


class AutocompleteResult:
    """NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "id": "str",
        "display_name": "str",
        "hint": "str",
        "cited_by_count": "int",
        "works_count": "int",
        "entity_type": "str",
        "external_id": "str",
        "filter_key": "str",
    }
    attribute_map = {
        "id": "id",
        "display_name": "display_name",
        "hint": "hint",
        "cited_by_count": "cited_by_count",
        "works_count": "works_count",
        "entity_type": "entity_type",
        "external_id": "external_id",
        "filter_key": "filter_key",
    }

    def __init__(
        self,
        id=None,
        display_name=None,
        hint=None,
        cited_by_count=None,
        works_count=None,
        entity_type=None,
        external_id=None,
        filter_key=None,
    ):
        """AutocompleteResult - a model defined in Swagger."""
        self._id = None
        self._display_name = None
        self._hint = None
        self._cited_by_count = None
        self._works_count = None
        self._entity_type = None
        self._external_id = None
        self._filter_key = None
        self.discriminator = None
        self.id = id
        self.display_name = display_name
        if hint is not None:
            self.hint = hint
        if cited_by_count is not None:
            self.cited_by_count = cited_by_count
        if works_count is not None:
            self.works_count = works_count
        self.entity_type = entity_type
        if external_id is not None:
            self.external_id = external_id
        if filter_key is not None:
            self.filter_key = filter_key

    @property
    def id(self):
        """Gets the id of this AutocompleteResult.
        :return: The id of this AutocompleteResult.
        :rtype: str.
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AutocompleteResult.
        :param id: The id of this AutocompleteResult.
        :type: str.
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        self._id = id

    @property
    def display_name(self):
        """Gets the display_name of this AutocompleteResult.
        :return: The display_name of this AutocompleteResult.
        :rtype: str.
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AutocompleteResult.
        :param display_name: The display_name of this AutocompleteResult.
        :type: str.
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")
        self._display_name = display_name

    @property
    def hint(self):
        """Gets the hint of this AutocompleteResult.
        Additional context about this result
        :return: The hint of this AutocompleteResult.
        :rtype: str.
        """
        return self._hint

    @hint.setter
    def hint(self, hint):
        """Sets the hint of this AutocompleteResult.
        Additional context about this result
        :param hint: The hint of this AutocompleteResult.
        :type: str.
        """
        self._hint = hint

    @property
    def cited_by_count(self):
        """Gets the cited_by_count of this AutocompleteResult.
        :return: The cited_by_count of this AutocompleteResult.
        :rtype: int.
        """
        return self._cited_by_count

    @cited_by_count.setter
    def cited_by_count(self, cited_by_count):
        """Sets the cited_by_count of this AutocompleteResult.
        :param cited_by_count: The cited_by_count of this AutocompleteResult.
        :type: int.
        """
        self._cited_by_count = cited_by_count

    @property
    def works_count(self):
        """Gets the works_count of this AutocompleteResult.
        :return: The works_count of this AutocompleteResult.
        :rtype: int.
        """
        return self._works_count

    @works_count.setter
    def works_count(self, works_count):
        """Sets the works_count of this AutocompleteResult.
        :param works_count: The works_count of this AutocompleteResult.
        :type: int.
        """
        self._works_count = works_count

    @property
    def entity_type(self):
        """Gets the entity_type of this AutocompleteResult.
        :return: The entity_type of this AutocompleteResult.
        :rtype: str.
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this AutocompleteResult.
        :param entity_type: The entity_type of this AutocompleteResult.
        :type: str.
        """
        if entity_type is None:
            raise ValueError("Invalid value for `entity_type`, must not be `None`")
        allowed_values = [
            "author",
            "concept",
            "institution",
            "source",
            "publisher",
            "funder",
            "work",
            "topic",
        ]
        if entity_type not in allowed_values:
            raise ValueError(
                f"Invalid value for `entity_type` ({entity_type}), must be one of {allowed_values}"
            )
        self._entity_type = entity_type

    @property
    def external_id(self):
        """Gets the external_id of this AutocompleteResult.
        The canonical external ID if available
        :return: The external_id of this AutocompleteResult.
        :rtype: str.
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this AutocompleteResult.
        The canonical external ID if available
        :param external_id: The external_id of this AutocompleteResult.
        :type: str.
        """
        self._external_id = external_id

    @property
    def filter_key(self):
        """Gets the filter_key of this AutocompleteResult.
        The filter key to use for this result
        :return: The filter_key of this AutocompleteResult.
        :rtype: str.
        """
        return self._filter_key

    @filter_key.setter
    def filter_key(self, filter_key):
        """Sets the filter_key of this AutocompleteResult.
        The filter key to use for this result
        :param filter_key: The filter_key of this AutocompleteResult.
        :type: str.
        """
        self._filter_key = filter_key

    def to_dict(self):
        """Returns the model properties as a dict."""
        result = {}
        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = [x.to_dict() if hasattr(x, "to_dict") else x for x in value]
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(AutocompleteResult, dict):
            for key, value in self.items():
                result[key] = value
        return result

    def to_str(self):
        """Returns the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal."""
        if not isinstance(other, AutocompleteResult):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal."""
        return not self == other

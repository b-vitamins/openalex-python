"""OpenAlex API
OpenAlex is a fully open catalog of the global research system. It's named after the ancient Library of Alexandria and made by the nonprofit OurResearch.  The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day.  For best performance, add your email to all API requests to join the polite pool using either: - The `mailto` query parameter (e.g., `mailto=you@example.com`) - The `User-Agent` header with mailto (e.g., `User-Agent: MyApp/1.0 (mailto:you@example.com)`)  Premium users get an API key which grants higher API limits and access to special filters.
OpenAPI spec version: 1.0.0
Generated by: https://github.com/swagger-api/swagger-codegen.git.
"""

import pprint

import six


class Funder:
    """NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "id": "str",
        "display_name": "str",
        "alternate_titles": "list[str]",
        "country_code": "str",
        "description": "str",
        "homepage_url": "str",
        "image_url": "str",
        "image_thumbnail_url": "str",
        "grants_count": "int",
        "works_count": "int",
        "cited_by_count": "int",
        "summary_stats": "SummaryStats",
        "roles": "list[Role]",
        "counts_by_year": "CountsByYear",
        "updated_date": "datetime",
        "created_date": "date",
        "ids": "FunderIds",
    }
    attribute_map = {
        "id": "id",
        "display_name": "display_name",
        "alternate_titles": "alternate_titles",
        "country_code": "country_code",
        "description": "description",
        "homepage_url": "homepage_url",
        "image_url": "image_url",
        "image_thumbnail_url": "image_thumbnail_url",
        "grants_count": "grants_count",
        "works_count": "works_count",
        "cited_by_count": "cited_by_count",
        "summary_stats": "summary_stats",
        "roles": "roles",
        "counts_by_year": "counts_by_year",
        "updated_date": "updated_date",
        "created_date": "created_date",
        "ids": "ids",
    }

    def __init__(
        self,
        id=None,
        display_name=None,
        alternate_titles=None,
        country_code=None,
        description=None,
        homepage_url=None,
        image_url=None,
        image_thumbnail_url=None,
        grants_count=None,
        works_count=None,
        cited_by_count=None,
        summary_stats=None,
        roles=None,
        counts_by_year=None,
        updated_date=None,
        created_date=None,
        ids=None,
    ):
        """Funder - a model defined in Swagger."""
        self._id = None
        self._display_name = None
        self._alternate_titles = None
        self._country_code = None
        self._description = None
        self._homepage_url = None
        self._image_url = None
        self._image_thumbnail_url = None
        self._grants_count = None
        self._works_count = None
        self._cited_by_count = None
        self._summary_stats = None
        self._roles = None
        self._counts_by_year = None
        self._updated_date = None
        self._created_date = None
        self._ids = None
        self.discriminator = None
        self.id = id
        self.display_name = display_name
        if alternate_titles is not None:
            self.alternate_titles = alternate_titles
        if country_code is not None:
            self.country_code = country_code
        if description is not None:
            self.description = description
        if homepage_url is not None:
            self.homepage_url = homepage_url
        if image_url is not None:
            self.image_url = image_url
        if image_thumbnail_url is not None:
            self.image_thumbnail_url = image_thumbnail_url
        if grants_count is not None:
            self.grants_count = grants_count
        if works_count is not None:
            self.works_count = works_count
        if cited_by_count is not None:
            self.cited_by_count = cited_by_count
        if summary_stats is not None:
            self.summary_stats = summary_stats
        if roles is not None:
            self.roles = roles
        if counts_by_year is not None:
            self.counts_by_year = counts_by_year
        if updated_date is not None:
            self.updated_date = updated_date
        if created_date is not None:
            self.created_date = created_date
        if ids is not None:
            self.ids = ids

    @property
    def id(self):
        """Gets the id of this Funder.
        :return: The id of this Funder.
        :rtype: str.
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Funder.
        :param id: The id of this Funder.
        :type: str.
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        self._id = id

    @property
    def display_name(self):
        """Gets the display_name of this Funder.
        :return: The display_name of this Funder.
        :rtype: str.
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Funder.
        :param display_name: The display_name of this Funder.
        :type: str.
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")
        self._display_name = display_name

    @property
    def alternate_titles(self):
        """Gets the alternate_titles of this Funder.
        :return: The alternate_titles of this Funder.
        :rtype: list[str].
        """
        return self._alternate_titles

    @alternate_titles.setter
    def alternate_titles(self, alternate_titles):
        """Sets the alternate_titles of this Funder.
        :param alternate_titles: The alternate_titles of this Funder.
        :type: list[str].
        """
        self._alternate_titles = alternate_titles

    @property
    def country_code(self):
        """Gets the country_code of this Funder.
        :return: The country_code of this Funder.
        :rtype: str.
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Funder.
        :param country_code: The country_code of this Funder.
        :type: str.
        """
        self._country_code = country_code

    @property
    def description(self):
        """Gets the description of this Funder.
        :return: The description of this Funder.
        :rtype: str.
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Funder.
        :param description: The description of this Funder.
        :type: str.
        """
        self._description = description

    @property
    def homepage_url(self):
        """Gets the homepage_url of this Funder.
        :return: The homepage_url of this Funder.
        :rtype: str.
        """
        return self._homepage_url

    @homepage_url.setter
    def homepage_url(self, homepage_url):
        """Sets the homepage_url of this Funder.
        :param homepage_url: The homepage_url of this Funder.
        :type: str.
        """
        self._homepage_url = homepage_url

    @property
    def image_url(self):
        """Gets the image_url of this Funder.
        :return: The image_url of this Funder.
        :rtype: str.
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this Funder.
        :param image_url: The image_url of this Funder.
        :type: str.
        """
        self._image_url = image_url

    @property
    def image_thumbnail_url(self):
        """Gets the image_thumbnail_url of this Funder.
        :return: The image_thumbnail_url of this Funder.
        :rtype: str.
        """
        return self._image_thumbnail_url

    @image_thumbnail_url.setter
    def image_thumbnail_url(self, image_thumbnail_url):
        """Sets the image_thumbnail_url of this Funder.
        :param image_thumbnail_url: The image_thumbnail_url of this Funder.
        :type: str.
        """
        self._image_thumbnail_url = image_thumbnail_url

    @property
    def grants_count(self):
        """Gets the grants_count of this Funder.
        :return: The grants_count of this Funder.
        :rtype: int.
        """
        return self._grants_count

    @grants_count.setter
    def grants_count(self, grants_count):
        """Sets the grants_count of this Funder.
        :param grants_count: The grants_count of this Funder.
        :type: int.
        """
        self._grants_count = grants_count

    @property
    def works_count(self):
        """Gets the works_count of this Funder.
        :return: The works_count of this Funder.
        :rtype: int.
        """
        return self._works_count

    @works_count.setter
    def works_count(self, works_count):
        """Sets the works_count of this Funder.
        :param works_count: The works_count of this Funder.
        :type: int.
        """
        self._works_count = works_count

    @property
    def cited_by_count(self):
        """Gets the cited_by_count of this Funder.
        :return: The cited_by_count of this Funder.
        :rtype: int.
        """
        return self._cited_by_count

    @cited_by_count.setter
    def cited_by_count(self, cited_by_count):
        """Sets the cited_by_count of this Funder.
        :param cited_by_count: The cited_by_count of this Funder.
        :type: int.
        """
        self._cited_by_count = cited_by_count

    @property
    def summary_stats(self):
        """Gets the summary_stats of this Funder.
        :return: The summary_stats of this Funder.
        :rtype: SummaryStats.
        """
        return self._summary_stats

    @summary_stats.setter
    def summary_stats(self, summary_stats):
        """Sets the summary_stats of this Funder.
        :param summary_stats: The summary_stats of this Funder.
        :type: SummaryStats.
        """
        self._summary_stats = summary_stats

    @property
    def roles(self):
        """Gets the roles of this Funder.
        :return: The roles of this Funder.
        :rtype: list[Role].
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this Funder.
        :param roles: The roles of this Funder.
        :type: list[Role].
        """
        self._roles = roles

    @property
    def counts_by_year(self):
        """Gets the counts_by_year of this Funder.
        :return: The counts_by_year of this Funder.
        :rtype: CountsByYear.
        """
        return self._counts_by_year

    @counts_by_year.setter
    def counts_by_year(self, counts_by_year):
        """Sets the counts_by_year of this Funder.
        :param counts_by_year: The counts_by_year of this Funder.
        :type: CountsByYear.
        """
        self._counts_by_year = counts_by_year

    @property
    def updated_date(self):
        """Gets the updated_date of this Funder.
        :return: The updated_date of this Funder.
        :rtype: datetime.
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this Funder.
        :param updated_date: The updated_date of this Funder.
        :type: datetime.
        """
        self._updated_date = updated_date

    @property
    def created_date(self):
        """Gets the created_date of this Funder.
        :return: The created_date of this Funder.
        :rtype: date.
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this Funder.
        :param created_date: The created_date of this Funder.
        :type: date.
        """
        self._created_date = created_date

    @property
    def ids(self):
        """Gets the ids of this Funder.
        :return: The ids of this Funder.
        :rtype: FunderIds.
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this Funder.
        :param ids: The ids of this Funder.
        :type: FunderIds.
        """
        self._ids = ids

    def to_dict(self):
        """Returns the model properties as a dict."""
        result = {}
        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = [x.to_dict() if hasattr(x, "to_dict") else x for x in value]
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(Funder, dict):
            for key, value in self.items():
                result[key] = value
        return result

    def to_str(self):
        """Returns the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal."""
        if not isinstance(other, Funder):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal."""
        return not self == other

"""OpenAlex API
OpenAlex is a fully open catalog of the global research system. It's named after the ancient Library of Alexandria and made by the nonprofit OurResearch.  The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day.  For best performance, add your email to all API requests to join the polite pool using either: - The `mailto` query parameter (e.g., `mailto=you@example.com`) - The `User-Agent` header with mailto (e.g., `User-Agent: MyApp/1.0 (mailto:you@example.com)`)  Premium users get an API key which grants higher API limits and access to special filters.
OpenAPI spec version: 1.0.0
Generated by: https://github.com/swagger-api/swagger-codegen.git.
"""

import pprint

import six


class Institution:
    """NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "id": "str",
        "ror": "str",
        "display_name": "str",
        "display_name_alternatives": "list[str]",
        "display_name_acronyms": "list[str]",
        "country_code": "str",
        "type": "str",
        "homepage_url": "str",
        "image_url": "str",
        "image_thumbnail_url": "str",
        "geo": "Geo",
        "associated_institutions": "list[AssociatedInstitution]",
        "repositories": "list[Repository]",
        "lineage": "list[str]",
        "is_super_system": "bool",
        "international": "InternationalNames",
        "works_count": "int",
        "cited_by_count": "int",
        "summary_stats": "SummaryStats",
        "roles": "list[Role]",
        "x_concepts": "list[DehydratedConcept]",
        "counts_by_year": "CountsByYear",
        "works_api_url": "str",
        "updated_date": "datetime",
        "created_date": "date",
        "ids": "InstitutionIds",
    }
    attribute_map = {
        "id": "id",
        "ror": "ror",
        "display_name": "display_name",
        "display_name_alternatives": "display_name_alternatives",
        "display_name_acronyms": "display_name_acronyms",
        "country_code": "country_code",
        "type": "type",
        "homepage_url": "homepage_url",
        "image_url": "image_url",
        "image_thumbnail_url": "image_thumbnail_url",
        "geo": "geo",
        "associated_institutions": "associated_institutions",
        "repositories": "repositories",
        "lineage": "lineage",
        "is_super_system": "is_super_system",
        "international": "international",
        "works_count": "works_count",
        "cited_by_count": "cited_by_count",
        "summary_stats": "summary_stats",
        "roles": "roles",
        "x_concepts": "x_concepts",
        "counts_by_year": "counts_by_year",
        "works_api_url": "works_api_url",
        "updated_date": "updated_date",
        "created_date": "created_date",
        "ids": "ids",
    }

    def __init__(
        self,
        id=None,
        ror=None,
        display_name=None,
        display_name_alternatives=None,
        display_name_acronyms=None,
        country_code=None,
        type=None,
        homepage_url=None,
        image_url=None,
        image_thumbnail_url=None,
        geo=None,
        associated_institutions=None,
        repositories=None,
        lineage=None,
        is_super_system=None,
        international=None,
        works_count=None,
        cited_by_count=None,
        summary_stats=None,
        roles=None,
        x_concepts=None,
        counts_by_year=None,
        works_api_url=None,
        updated_date=None,
        created_date=None,
        ids=None,
    ):
        """Institution - a model defined in Swagger."""
        self._id = None
        self._ror = None
        self._display_name = None
        self._display_name_alternatives = None
        self._display_name_acronyms = None
        self._country_code = None
        self._type = None
        self._homepage_url = None
        self._image_url = None
        self._image_thumbnail_url = None
        self._geo = None
        self._associated_institutions = None
        self._repositories = None
        self._lineage = None
        self._is_super_system = None
        self._international = None
        self._works_count = None
        self._cited_by_count = None
        self._summary_stats = None
        self._roles = None
        self._x_concepts = None
        self._counts_by_year = None
        self._works_api_url = None
        self._updated_date = None
        self._created_date = None
        self._ids = None
        self.discriminator = None
        self.id = id
        if ror is not None:
            self.ror = ror
        self.display_name = display_name
        if display_name_alternatives is not None:
            self.display_name_alternatives = display_name_alternatives
        if display_name_acronyms is not None:
            self.display_name_acronyms = display_name_acronyms
        if country_code is not None:
            self.country_code = country_code
        if type is not None:
            self.type = type
        if homepage_url is not None:
            self.homepage_url = homepage_url
        if image_url is not None:
            self.image_url = image_url
        if image_thumbnail_url is not None:
            self.image_thumbnail_url = image_thumbnail_url
        if geo is not None:
            self.geo = geo
        if associated_institutions is not None:
            self.associated_institutions = associated_institutions
        if repositories is not None:
            self.repositories = repositories
        if lineage is not None:
            self.lineage = lineage
        if is_super_system is not None:
            self.is_super_system = is_super_system
        if international is not None:
            self.international = international
        if works_count is not None:
            self.works_count = works_count
        if cited_by_count is not None:
            self.cited_by_count = cited_by_count
        if summary_stats is not None:
            self.summary_stats = summary_stats
        if roles is not None:
            self.roles = roles
        if x_concepts is not None:
            self.x_concepts = x_concepts
        if counts_by_year is not None:
            self.counts_by_year = counts_by_year
        if works_api_url is not None:
            self.works_api_url = works_api_url
        if updated_date is not None:
            self.updated_date = updated_date
        if created_date is not None:
            self.created_date = created_date
        if ids is not None:
            self.ids = ids

    @property
    def id(self):
        """Gets the id of this Institution.
        :return: The id of this Institution.
        :rtype: str.
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Institution.
        :param id: The id of this Institution.
        :type: str.
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        self._id = id

    @property
    def ror(self):
        """Gets the ror of this Institution.
        :return: The ror of this Institution.
        :rtype: str.
        """
        return self._ror

    @ror.setter
    def ror(self, ror):
        """Sets the ror of this Institution.
        :param ror: The ror of this Institution.
        :type: str.
        """
        self._ror = ror

    @property
    def display_name(self):
        """Gets the display_name of this Institution.
        :return: The display_name of this Institution.
        :rtype: str.
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Institution.
        :param display_name: The display_name of this Institution.
        :type: str.
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")
        self._display_name = display_name

    @property
    def display_name_alternatives(self):
        """Gets the display_name_alternatives of this Institution.
        :return: The display_name_alternatives of this Institution.
        :rtype: list[str].
        """
        return self._display_name_alternatives

    @display_name_alternatives.setter
    def display_name_alternatives(self, display_name_alternatives):
        """Sets the display_name_alternatives of this Institution.
        :param display_name_alternatives: The display_name_alternatives of this Institution.
        :type: list[str].
        """
        self._display_name_alternatives = display_name_alternatives

    @property
    def display_name_acronyms(self):
        """Gets the display_name_acronyms of this Institution.
        :return: The display_name_acronyms of this Institution.
        :rtype: list[str].
        """
        return self._display_name_acronyms

    @display_name_acronyms.setter
    def display_name_acronyms(self, display_name_acronyms):
        """Sets the display_name_acronyms of this Institution.
        :param display_name_acronyms: The display_name_acronyms of this Institution.
        :type: list[str].
        """
        self._display_name_acronyms = display_name_acronyms

    @property
    def country_code(self):
        """Gets the country_code of this Institution.
        :return: The country_code of this Institution.
        :rtype: str.
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Institution.
        :param country_code: The country_code of this Institution.
        :type: str.
        """
        self._country_code = country_code

    @property
    def type(self):
        """Gets the type of this Institution.
        :return: The type of this Institution.
        :rtype: str.
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Institution.
        :param type: The type of this Institution.
        :type: str.
        """
        allowed_values = [
            "education",
            "healthcare",
            "company",
            "archive",
            "nonprofit",
            "government",
            "facility",
            "other",
        ]
        if type not in allowed_values:
            raise ValueError(
                f"Invalid value for `type` ({type}), must be one of {allowed_values}"
            )
        self._type = type

    @property
    def homepage_url(self):
        """Gets the homepage_url of this Institution.
        :return: The homepage_url of this Institution.
        :rtype: str.
        """
        return self._homepage_url

    @homepage_url.setter
    def homepage_url(self, homepage_url):
        """Sets the homepage_url of this Institution.
        :param homepage_url: The homepage_url of this Institution.
        :type: str.
        """
        self._homepage_url = homepage_url

    @property
    def image_url(self):
        """Gets the image_url of this Institution.
        :return: The image_url of this Institution.
        :rtype: str.
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this Institution.
        :param image_url: The image_url of this Institution.
        :type: str.
        """
        self._image_url = image_url

    @property
    def image_thumbnail_url(self):
        """Gets the image_thumbnail_url of this Institution.
        :return: The image_thumbnail_url of this Institution.
        :rtype: str.
        """
        return self._image_thumbnail_url

    @image_thumbnail_url.setter
    def image_thumbnail_url(self, image_thumbnail_url):
        """Sets the image_thumbnail_url of this Institution.
        :param image_thumbnail_url: The image_thumbnail_url of this Institution.
        :type: str.
        """
        self._image_thumbnail_url = image_thumbnail_url

    @property
    def geo(self):
        """Gets the geo of this Institution.
        :return: The geo of this Institution.
        :rtype: Geo.
        """
        return self._geo

    @geo.setter
    def geo(self, geo):
        """Sets the geo of this Institution.
        :param geo: The geo of this Institution.
        :type: Geo.
        """
        self._geo = geo

    @property
    def associated_institutions(self):
        """Gets the associated_institutions of this Institution.
        :return: The associated_institutions of this Institution.
        :rtype: list[AssociatedInstitution].
        """
        return self._associated_institutions

    @associated_institutions.setter
    def associated_institutions(self, associated_institutions):
        """Sets the associated_institutions of this Institution.
        :param associated_institutions: The associated_institutions of this Institution.
        :type: list[AssociatedInstitution].
        """
        self._associated_institutions = associated_institutions

    @property
    def repositories(self):
        """Gets the repositories of this Institution.
        :return: The repositories of this Institution.
        :rtype: list[Repository].
        """
        return self._repositories

    @repositories.setter
    def repositories(self, repositories):
        """Sets the repositories of this Institution.
        :param repositories: The repositories of this Institution.
        :type: list[Repository].
        """
        self._repositories = repositories

    @property
    def lineage(self):
        """Gets the lineage of this Institution.
        Parent institution IDs, excluding super systems
        :return: The lineage of this Institution.
        :rtype: list[str].
        """
        return self._lineage

    @lineage.setter
    def lineage(self, lineage):
        """Sets the lineage of this Institution.
        Parent institution IDs, excluding super systems
        :param lineage: The lineage of this Institution.
        :type: list[str].
        """
        self._lineage = lineage

    @property
    def is_super_system(self):
        """Gets the is_super_system of this Institution.
        Whether this is a super system (large university system, government, etc.)
        :return: The is_super_system of this Institution.
        :rtype: bool.
        """
        return self._is_super_system

    @is_super_system.setter
    def is_super_system(self, is_super_system):
        """Sets the is_super_system of this Institution.
        Whether this is a super system (large university system, government, etc.)
        :param is_super_system: The is_super_system of this Institution.
        :type: bool.
        """
        self._is_super_system = is_super_system

    @property
    def international(self):
        """Gets the international of this Institution.
        :return: The international of this Institution.
        :rtype: InternationalNames.
        """
        return self._international

    @international.setter
    def international(self, international):
        """Sets the international of this Institution.
        :param international: The international of this Institution.
        :type: InternationalNames.
        """
        self._international = international

    @property
    def works_count(self):
        """Gets the works_count of this Institution.
        :return: The works_count of this Institution.
        :rtype: int.
        """
        return self._works_count

    @works_count.setter
    def works_count(self, works_count):
        """Sets the works_count of this Institution.
        :param works_count: The works_count of this Institution.
        :type: int.
        """
        self._works_count = works_count

    @property
    def cited_by_count(self):
        """Gets the cited_by_count of this Institution.
        :return: The cited_by_count of this Institution.
        :rtype: int.
        """
        return self._cited_by_count

    @cited_by_count.setter
    def cited_by_count(self, cited_by_count):
        """Sets the cited_by_count of this Institution.
        :param cited_by_count: The cited_by_count of this Institution.
        :type: int.
        """
        self._cited_by_count = cited_by_count

    @property
    def summary_stats(self):
        """Gets the summary_stats of this Institution.
        :return: The summary_stats of this Institution.
        :rtype: SummaryStats.
        """
        return self._summary_stats

    @summary_stats.setter
    def summary_stats(self, summary_stats):
        """Sets the summary_stats of this Institution.
        :param summary_stats: The summary_stats of this Institution.
        :type: SummaryStats.
        """
        self._summary_stats = summary_stats

    @property
    def roles(self):
        """Gets the roles of this Institution.
        :return: The roles of this Institution.
        :rtype: list[Role].
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this Institution.
        :param roles: The roles of this Institution.
        :type: list[Role].
        """
        self._roles = roles

    @property
    def x_concepts(self):
        """Gets the x_concepts of this Institution.
        :return: The x_concepts of this Institution.
        :rtype: list[DehydratedConcept].
        """
        return self._x_concepts

    @x_concepts.setter
    def x_concepts(self, x_concepts):
        """Sets the x_concepts of this Institution.
        :param x_concepts: The x_concepts of this Institution.
        :type: list[DehydratedConcept].
        """
        self._x_concepts = x_concepts

    @property
    def counts_by_year(self):
        """Gets the counts_by_year of this Institution.
        :return: The counts_by_year of this Institution.
        :rtype: CountsByYear.
        """
        return self._counts_by_year

    @counts_by_year.setter
    def counts_by_year(self, counts_by_year):
        """Sets the counts_by_year of this Institution.
        :param counts_by_year: The counts_by_year of this Institution.
        :type: CountsByYear.
        """
        self._counts_by_year = counts_by_year

    @property
    def works_api_url(self):
        """Gets the works_api_url of this Institution.
        :return: The works_api_url of this Institution.
        :rtype: str.
        """
        return self._works_api_url

    @works_api_url.setter
    def works_api_url(self, works_api_url):
        """Sets the works_api_url of this Institution.
        :param works_api_url: The works_api_url of this Institution.
        :type: str.
        """
        self._works_api_url = works_api_url

    @property
    def updated_date(self):
        """Gets the updated_date of this Institution.
        :return: The updated_date of this Institution.
        :rtype: datetime.
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this Institution.
        :param updated_date: The updated_date of this Institution.
        :type: datetime.
        """
        self._updated_date = updated_date

    @property
    def created_date(self):
        """Gets the created_date of this Institution.
        :return: The created_date of this Institution.
        :rtype: date.
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this Institution.
        :param created_date: The created_date of this Institution.
        :type: date.
        """
        self._created_date = created_date

    @property
    def ids(self):
        """Gets the ids of this Institution.
        :return: The ids of this Institution.
        :rtype: InstitutionIds.
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this Institution.
        :param ids: The ids of this Institution.
        :type: InstitutionIds.
        """
        self._ids = ids

    def to_dict(self):
        """Returns the model properties as a dict."""
        result = {}
        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = [x.to_dict() if hasattr(x, "to_dict") else x for x in value]
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(Institution, dict):
            for key, value in self.items():
                result[key] = value
        return result

    def to_str(self):
        """Returns the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal."""
        if not isinstance(other, Institution):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal."""
        return not self == other

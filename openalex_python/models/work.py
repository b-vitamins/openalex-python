"""OpenAlex API
OpenAlex is a fully open catalog of the global research system. It's named after the ancient Library of Alexandria and made by the nonprofit OurResearch.  The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day.  For best performance, add your email to all API requests to join the polite pool using either: - The `mailto` query parameter (e.g., `mailto=you@example.com`) - The `User-Agent` header with mailto (e.g., `User-Agent: MyApp/1.0 (mailto:you@example.com)`)  Premium users get an API key which grants higher API limits and access to special filters.
OpenAPI spec version: 1.0.0
Generated by: https://github.com/swagger-api/swagger-codegen.git.
"""

import pprint

import six


class Work:
    """NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "id": "str",
        "doi": "str",
        "title": "str",
        "display_name": "str",
        "publication_year": "int",
        "publication_date": "date",
        "type": "str",
        "type_crossref": "str",
        "indexed_in": "list[str]",
        "open_access": "OpenAccess",
        "authorships": "list[Authorship]",
        "corresponding_author_ids": "list[str]",
        "corresponding_institution_ids": "list[str]",
        "countries_distinct_count": "int",
        "institutions_distinct_count": "int",
        "cited_by_count": "int",
        "citation_normalized_percentile": "WorkCitationNormalizedPercentile",
        "biblio": "Biblio",
        "is_retracted": "bool",
        "is_paratext": "bool",
        "primary_location": "Location",
        "best_oa_location": "Location",
        "locations": "list[Location]",
        "locations_count": "int",
        "mesh": "list[MeshTag]",
        "keywords": "list[KeywordTag]",
        "concepts": "list[DehydratedConcept]",
        "primary_topic": "DehydratedTopic",
        "topics": "list[DehydratedTopic]",
        "grants": "list[Grant]",
        "apc_list": "APC",
        "apc_paid": "APC",
        "fwci": "float",
        "has_fulltext": "bool",
        "fulltext_origin": "str",
        "cited_by_api_url": "str",
        "counts_by_year": "CountsByYear",
        "updated_date": "datetime",
        "created_date": "date",
        "abstract_inverted_index": "dict(str, list[int])",
        "language": "str",
        "license": "str",
        "referenced_works": "list[str]",
        "related_works": "list[str]",
        "sustainable_development_goals": "list[SustainableDevelopmentGoal]",
        "ids": "WorkIds",
    }
    attribute_map = {
        "id": "id",
        "doi": "doi",
        "title": "title",
        "display_name": "display_name",
        "publication_year": "publication_year",
        "publication_date": "publication_date",
        "type": "type",
        "type_crossref": "type_crossref",
        "indexed_in": "indexed_in",
        "open_access": "open_access",
        "authorships": "authorships",
        "corresponding_author_ids": "corresponding_author_ids",
        "corresponding_institution_ids": "corresponding_institution_ids",
        "countries_distinct_count": "countries_distinct_count",
        "institutions_distinct_count": "institutions_distinct_count",
        "cited_by_count": "cited_by_count",
        "citation_normalized_percentile": "citation_normalized_percentile",
        "biblio": "biblio",
        "is_retracted": "is_retracted",
        "is_paratext": "is_paratext",
        "primary_location": "primary_location",
        "best_oa_location": "best_oa_location",
        "locations": "locations",
        "locations_count": "locations_count",
        "mesh": "mesh",
        "keywords": "keywords",
        "concepts": "concepts",
        "primary_topic": "primary_topic",
        "topics": "topics",
        "grants": "grants",
        "apc_list": "apc_list",
        "apc_paid": "apc_paid",
        "fwci": "fwci",
        "has_fulltext": "has_fulltext",
        "fulltext_origin": "fulltext_origin",
        "cited_by_api_url": "cited_by_api_url",
        "counts_by_year": "counts_by_year",
        "updated_date": "updated_date",
        "created_date": "created_date",
        "abstract_inverted_index": "abstract_inverted_index",
        "language": "language",
        "license": "license",
        "referenced_works": "referenced_works",
        "related_works": "related_works",
        "sustainable_development_goals": "sustainable_development_goals",
        "ids": "ids",
    }

    def __init__(
        self,
        id=None,
        doi=None,
        title=None,
        display_name=None,
        publication_year=None,
        publication_date=None,
        type=None,
        type_crossref=None,
        indexed_in=None,
        open_access=None,
        authorships=None,
        corresponding_author_ids=None,
        corresponding_institution_ids=None,
        countries_distinct_count=None,
        institutions_distinct_count=None,
        cited_by_count=None,
        citation_normalized_percentile=None,
        biblio=None,
        is_retracted=None,
        is_paratext=None,
        primary_location=None,
        best_oa_location=None,
        locations=None,
        locations_count=None,
        mesh=None,
        keywords=None,
        concepts=None,
        primary_topic=None,
        topics=None,
        grants=None,
        apc_list=None,
        apc_paid=None,
        fwci=None,
        has_fulltext=None,
        fulltext_origin=None,
        cited_by_api_url=None,
        counts_by_year=None,
        updated_date=None,
        created_date=None,
        abstract_inverted_index=None,
        language=None,
        license=None,
        referenced_works=None,
        related_works=None,
        sustainable_development_goals=None,
        ids=None,
    ):
        """Work - a model defined in Swagger."""
        self._id = None
        self._doi = None
        self._title = None
        self._display_name = None
        self._publication_year = None
        self._publication_date = None
        self._type = None
        self._type_crossref = None
        self._indexed_in = None
        self._open_access = None
        self._authorships = None
        self._corresponding_author_ids = None
        self._corresponding_institution_ids = None
        self._countries_distinct_count = None
        self._institutions_distinct_count = None
        self._cited_by_count = None
        self._citation_normalized_percentile = None
        self._biblio = None
        self._is_retracted = None
        self._is_paratext = None
        self._primary_location = None
        self._best_oa_location = None
        self._locations = None
        self._locations_count = None
        self._mesh = None
        self._keywords = None
        self._concepts = None
        self._primary_topic = None
        self._topics = None
        self._grants = None
        self._apc_list = None
        self._apc_paid = None
        self._fwci = None
        self._has_fulltext = None
        self._fulltext_origin = None
        self._cited_by_api_url = None
        self._counts_by_year = None
        self._updated_date = None
        self._created_date = None
        self._abstract_inverted_index = None
        self._language = None
        self._license = None
        self._referenced_works = None
        self._related_works = None
        self._sustainable_development_goals = None
        self._ids = None
        self.discriminator = None
        self.id = id
        if doi is not None:
            self.doi = doi
        if title is not None:
            self.title = title
        self.display_name = display_name
        if publication_year is not None:
            self.publication_year = publication_year
        if publication_date is not None:
            self.publication_date = publication_date
        if type is not None:
            self.type = type
        if type_crossref is not None:
            self.type_crossref = type_crossref
        if indexed_in is not None:
            self.indexed_in = indexed_in
        if open_access is not None:
            self.open_access = open_access
        if authorships is not None:
            self.authorships = authorships
        if corresponding_author_ids is not None:
            self.corresponding_author_ids = corresponding_author_ids
        if corresponding_institution_ids is not None:
            self.corresponding_institution_ids = corresponding_institution_ids
        if countries_distinct_count is not None:
            self.countries_distinct_count = countries_distinct_count
        if institutions_distinct_count is not None:
            self.institutions_distinct_count = institutions_distinct_count
        if cited_by_count is not None:
            self.cited_by_count = cited_by_count
        if citation_normalized_percentile is not None:
            self.citation_normalized_percentile = citation_normalized_percentile
        if biblio is not None:
            self.biblio = biblio
        if is_retracted is not None:
            self.is_retracted = is_retracted
        if is_paratext is not None:
            self.is_paratext = is_paratext
        if primary_location is not None:
            self.primary_location = primary_location
        if best_oa_location is not None:
            self.best_oa_location = best_oa_location
        if locations is not None:
            self.locations = locations
        if locations_count is not None:
            self.locations_count = locations_count
        if mesh is not None:
            self.mesh = mesh
        if keywords is not None:
            self.keywords = keywords
        if concepts is not None:
            self.concepts = concepts
        if primary_topic is not None:
            self.primary_topic = primary_topic
        if topics is not None:
            self.topics = topics
        if grants is not None:
            self.grants = grants
        if apc_list is not None:
            self.apc_list = apc_list
        if apc_paid is not None:
            self.apc_paid = apc_paid
        if fwci is not None:
            self.fwci = fwci
        if has_fulltext is not None:
            self.has_fulltext = has_fulltext
        if fulltext_origin is not None:
            self.fulltext_origin = fulltext_origin
        if cited_by_api_url is not None:
            self.cited_by_api_url = cited_by_api_url
        if counts_by_year is not None:
            self.counts_by_year = counts_by_year
        if updated_date is not None:
            self.updated_date = updated_date
        if created_date is not None:
            self.created_date = created_date
        if abstract_inverted_index is not None:
            self.abstract_inverted_index = abstract_inverted_index
        if language is not None:
            self.language = language
        if license is not None:
            self.license = license
        if referenced_works is not None:
            self.referenced_works = referenced_works
        if related_works is not None:
            self.related_works = related_works
        if sustainable_development_goals is not None:
            self.sustainable_development_goals = sustainable_development_goals
        if ids is not None:
            self.ids = ids

    @property
    def id(self):
        """Gets the id of this Work.
        :return: The id of this Work.
        :rtype: str.
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Work.
        :param id: The id of this Work.
        :type: str.
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        self._id = id

    @property
    def doi(self):
        """Gets the doi of this Work.
        :return: The doi of this Work.
        :rtype: str.
        """
        return self._doi

    @doi.setter
    def doi(self, doi):
        """Sets the doi of this Work.
        :param doi: The doi of this Work.
        :type: str.
        """
        self._doi = doi

    @property
    def title(self):
        """Gets the title of this Work.
        The title of the work
        :return: The title of this Work.
        :rtype: str.
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Work.
        The title of the work
        :param title: The title of this Work.
        :type: str.
        """
        self._title = title

    @property
    def display_name(self):
        """Gets the display_name of this Work.
        Same as title
        :return: The display_name of this Work.
        :rtype: str.
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Work.
        Same as title
        :param display_name: The display_name of this Work.
        :type: str.
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")
        self._display_name = display_name

    @property
    def publication_year(self):
        """Gets the publication_year of this Work.
        :return: The publication_year of this Work.
        :rtype: int.
        """
        return self._publication_year

    @publication_year.setter
    def publication_year(self, publication_year):
        """Sets the publication_year of this Work.
        :param publication_year: The publication_year of this Work.
        :type: int.
        """
        self._publication_year = publication_year

    @property
    def publication_date(self):
        """Gets the publication_date of this Work.
        :return: The publication_date of this Work.
        :rtype: date.
        """
        return self._publication_date

    @publication_date.setter
    def publication_date(self, publication_date):
        """Sets the publication_date of this Work.
        :param publication_date: The publication_date of this Work.
        :type: date.
        """
        self._publication_date = publication_date

    @property
    def type(self):
        """Gets the type of this Work.
        The type of work
        :return: The type of this Work.
        :rtype: str.
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Work.
        The type of work
        :param type: The type of this Work.
        :type: str.
        """
        self._type = type

    @property
    def type_crossref(self):
        """Gets the type_crossref of this Work.
        Legacy type from Crossref
        :return: The type_crossref of this Work.
        :rtype: str.
        """
        return self._type_crossref

    @type_crossref.setter
    def type_crossref(self, type_crossref):
        """Sets the type_crossref of this Work.
        Legacy type from Crossref
        :param type_crossref: The type_crossref of this Work.
        :type: str.
        """
        self._type_crossref = type_crossref

    @property
    def indexed_in(self):
        """Gets the indexed_in of this Work.
        Sources this work is indexed in
        :return: The indexed_in of this Work.
        :rtype: list[str].
        """
        return self._indexed_in

    @indexed_in.setter
    def indexed_in(self, indexed_in):
        """Sets the indexed_in of this Work.
        Sources this work is indexed in
        :param indexed_in: The indexed_in of this Work.
        :type: list[str].
        """
        allowed_values = ["arxiv", "crossref", "doaj", "pubmed"]
        if not set(indexed_in).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `indexed_in` [{}], must be a subset of [{}]".format(
                    ", ".join(map(str, set(indexed_in) - set(allowed_values))),
                    ", ".join(map(str, allowed_values)),
                )
            )
        self._indexed_in = indexed_in

    @property
    def open_access(self):
        """Gets the open_access of this Work.
        :return: The open_access of this Work.
        :rtype: OpenAccess.
        """
        return self._open_access

    @open_access.setter
    def open_access(self, open_access):
        """Sets the open_access of this Work.
        :param open_access: The open_access of this Work.
        :type: OpenAccess.
        """
        self._open_access = open_access

    @property
    def authorships(self):
        """Gets the authorships of this Work.
        Authors and their affiliations (limited to first 100 in lists)
        :return: The authorships of this Work.
        :rtype: list[Authorship].
        """
        return self._authorships

    @authorships.setter
    def authorships(self, authorships):
        """Sets the authorships of this Work.
        Authors and their affiliations (limited to first 100 in lists)
        :param authorships: The authorships of this Work.
        :type: list[Authorship].
        """
        self._authorships = authorships

    @property
    def corresponding_author_ids(self):
        """Gets the corresponding_author_ids of this Work.
        OpenAlex IDs of corresponding authors
        :return: The corresponding_author_ids of this Work.
        :rtype: list[str].
        """
        return self._corresponding_author_ids

    @corresponding_author_ids.setter
    def corresponding_author_ids(self, corresponding_author_ids):
        """Sets the corresponding_author_ids of this Work.
        OpenAlex IDs of corresponding authors
        :param corresponding_author_ids: The corresponding_author_ids of this Work.
        :type: list[str].
        """
        self._corresponding_author_ids = corresponding_author_ids

    @property
    def corresponding_institution_ids(self):
        """Gets the corresponding_institution_ids of this Work.
        OpenAlex IDs of corresponding institutions
        :return: The corresponding_institution_ids of this Work.
        :rtype: list[str].
        """
        return self._corresponding_institution_ids

    @corresponding_institution_ids.setter
    def corresponding_institution_ids(self, corresponding_institution_ids):
        """Sets the corresponding_institution_ids of this Work.
        OpenAlex IDs of corresponding institutions
        :param corresponding_institution_ids: The corresponding_institution_ids of this Work.
        :type: list[str].
        """
        self._corresponding_institution_ids = corresponding_institution_ids

    @property
    def countries_distinct_count(self):
        """Gets the countries_distinct_count of this Work.
        Number of distinct countries among author affiliations
        :return: The countries_distinct_count of this Work.
        :rtype: int.
        """
        return self._countries_distinct_count

    @countries_distinct_count.setter
    def countries_distinct_count(self, countries_distinct_count):
        """Sets the countries_distinct_count of this Work.
        Number of distinct countries among author affiliations
        :param countries_distinct_count: The countries_distinct_count of this Work.
        :type: int.
        """
        self._countries_distinct_count = countries_distinct_count

    @property
    def institutions_distinct_count(self):
        """Gets the institutions_distinct_count of this Work.
        Number of distinct institutions among author affiliations
        :return: The institutions_distinct_count of this Work.
        :rtype: int.
        """
        return self._institutions_distinct_count

    @institutions_distinct_count.setter
    def institutions_distinct_count(self, institutions_distinct_count):
        """Sets the institutions_distinct_count of this Work.
        Number of distinct institutions among author affiliations
        :param institutions_distinct_count: The institutions_distinct_count of this Work.
        :type: int.
        """
        self._institutions_distinct_count = institutions_distinct_count

    @property
    def cited_by_count(self):
        """Gets the cited_by_count of this Work.
        Number of citations to this work
        :return: The cited_by_count of this Work.
        :rtype: int.
        """
        return self._cited_by_count

    @cited_by_count.setter
    def cited_by_count(self, cited_by_count):
        """Sets the cited_by_count of this Work.
        Number of citations to this work
        :param cited_by_count: The cited_by_count of this Work.
        :type: int.
        """
        self._cited_by_count = cited_by_count

    @property
    def citation_normalized_percentile(self):
        """Gets the citation_normalized_percentile of this Work.
        :return: The citation_normalized_percentile of this Work.
        :rtype: WorkCitationNormalizedPercentile.
        """
        return self._citation_normalized_percentile

    @citation_normalized_percentile.setter
    def citation_normalized_percentile(self, citation_normalized_percentile):
        """Sets the citation_normalized_percentile of this Work.
        :param citation_normalized_percentile: The citation_normalized_percentile of this Work.
        :type: WorkCitationNormalizedPercentile.
        """
        self._citation_normalized_percentile = citation_normalized_percentile

    @property
    def biblio(self):
        """Gets the biblio of this Work.
        :return: The biblio of this Work.
        :rtype: Biblio.
        """
        return self._biblio

    @biblio.setter
    def biblio(self, biblio):
        """Sets the biblio of this Work.
        :param biblio: The biblio of this Work.
        :type: Biblio.
        """
        self._biblio = biblio

    @property
    def is_retracted(self):
        """Gets the is_retracted of this Work.
        Whether this work has been retracted
        :return: The is_retracted of this Work.
        :rtype: bool.
        """
        return self._is_retracted

    @is_retracted.setter
    def is_retracted(self, is_retracted):
        """Sets the is_retracted of this Work.
        Whether this work has been retracted
        :param is_retracted: The is_retracted of this Work.
        :type: bool.
        """
        self._is_retracted = is_retracted

    @property
    def is_paratext(self):
        """Gets the is_paratext of this Work.
        Whether this work is paratext
        :return: The is_paratext of this Work.
        :rtype: bool.
        """
        return self._is_paratext

    @is_paratext.setter
    def is_paratext(self, is_paratext):
        """Sets the is_paratext of this Work.
        Whether this work is paratext
        :param is_paratext: The is_paratext of this Work.
        :type: bool.
        """
        self._is_paratext = is_paratext

    @property
    def primary_location(self):
        """Gets the primary_location of this Work.
        :return: The primary_location of this Work.
        :rtype: Location.
        """
        return self._primary_location

    @primary_location.setter
    def primary_location(self, primary_location):
        """Sets the primary_location of this Work.
        :param primary_location: The primary_location of this Work.
        :type: Location.
        """
        self._primary_location = primary_location

    @property
    def best_oa_location(self):
        """Gets the best_oa_location of this Work.
        :return: The best_oa_location of this Work.
        :rtype: Location.
        """
        return self._best_oa_location

    @best_oa_location.setter
    def best_oa_location(self, best_oa_location):
        """Sets the best_oa_location of this Work.
        :param best_oa_location: The best_oa_location of this Work.
        :type: Location.
        """
        self._best_oa_location = best_oa_location

    @property
    def locations(self):
        """Gets the locations of this Work.
        :return: The locations of this Work.
        :rtype: list[Location].
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this Work.
        :param locations: The locations of this Work.
        :type: list[Location].
        """
        self._locations = locations

    @property
    def locations_count(self):
        """Gets the locations_count of this Work.
        Number of locations for this work
        :return: The locations_count of this Work.
        :rtype: int.
        """
        return self._locations_count

    @locations_count.setter
    def locations_count(self, locations_count):
        """Sets the locations_count of this Work.
        Number of locations for this work
        :param locations_count: The locations_count of this Work.
        :type: int.
        """
        self._locations_count = locations_count

    @property
    def mesh(self):
        """Gets the mesh of this Work.
        MeSH tags from PubMed
        :return: The mesh of this Work.
        :rtype: list[MeshTag].
        """
        return self._mesh

    @mesh.setter
    def mesh(self, mesh):
        """Sets the mesh of this Work.
        MeSH tags from PubMed
        :param mesh: The mesh of this Work.
        :type: list[MeshTag].
        """
        self._mesh = mesh

    @property
    def keywords(self):
        """Gets the keywords of this Work.
        :return: The keywords of this Work.
        :rtype: list[KeywordTag].
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this Work.
        :param keywords: The keywords of this Work.
        :type: list[KeywordTag].
        """
        self._keywords = keywords

    @property
    def concepts(self):
        """Gets the concepts of this Work.
        Deprecated in favor of topics
        :return: The concepts of this Work.
        :rtype: list[DehydratedConcept].
        """
        return self._concepts

    @concepts.setter
    def concepts(self, concepts):
        """Sets the concepts of this Work.
        Deprecated in favor of topics
        :param concepts: The concepts of this Work.
        :type: list[DehydratedConcept].
        """
        self._concepts = concepts

    @property
    def primary_topic(self):
        """Gets the primary_topic of this Work.
        :return: The primary_topic of this Work.
        :rtype: DehydratedTopic.
        """
        return self._primary_topic

    @primary_topic.setter
    def primary_topic(self, primary_topic):
        """Sets the primary_topic of this Work.
        :param primary_topic: The primary_topic of this Work.
        :type: DehydratedTopic.
        """
        self._primary_topic = primary_topic

    @property
    def topics(self):
        """Gets the topics of this Work.
        Up to 3 topics for this work
        :return: The topics of this Work.
        :rtype: list[DehydratedTopic].
        """
        return self._topics

    @topics.setter
    def topics(self, topics):
        """Sets the topics of this Work.
        Up to 3 topics for this work
        :param topics: The topics of this Work.
        :type: list[DehydratedTopic].
        """
        self._topics = topics

    @property
    def grants(self):
        """Gets the grants of this Work.
        :return: The grants of this Work.
        :rtype: list[Grant].
        """
        return self._grants

    @grants.setter
    def grants(self, grants):
        """Sets the grants of this Work.
        :param grants: The grants of this Work.
        :type: list[Grant].
        """
        self._grants = grants

    @property
    def apc_list(self):
        """Gets the apc_list of this Work.
        :return: The apc_list of this Work.
        :rtype: APC.
        """
        return self._apc_list

    @apc_list.setter
    def apc_list(self, apc_list):
        """Sets the apc_list of this Work.
        :param apc_list: The apc_list of this Work.
        :type: APC.
        """
        self._apc_list = apc_list

    @property
    def apc_paid(self):
        """Gets the apc_paid of this Work.
        :return: The apc_paid of this Work.
        :rtype: APC.
        """
        return self._apc_paid

    @apc_paid.setter
    def apc_paid(self, apc_paid):
        """Sets the apc_paid of this Work.
        :param apc_paid: The apc_paid of this Work.
        :type: APC.
        """
        self._apc_paid = apc_paid

    @property
    def fwci(self):
        """Gets the fwci of this Work.
        Field-weighted citation impact
        :return: The fwci of this Work.
        :rtype: float.
        """
        return self._fwci

    @fwci.setter
    def fwci(self, fwci):
        """Sets the fwci of this Work.
        Field-weighted citation impact
        :param fwci: The fwci of this Work.
        :type: float.
        """
        self._fwci = fwci

    @property
    def has_fulltext(self):
        """Gets the has_fulltext of this Work.
        Whether fulltext is indexed for search
        :return: The has_fulltext of this Work.
        :rtype: bool.
        """
        return self._has_fulltext

    @has_fulltext.setter
    def has_fulltext(self, has_fulltext):
        """Sets the has_fulltext of this Work.
        Whether fulltext is indexed for search
        :param has_fulltext: The has_fulltext of this Work.
        :type: bool.
        """
        self._has_fulltext = has_fulltext

    @property
    def fulltext_origin(self):
        """Gets the fulltext_origin of this Work.
        How we got the fulltext
        :return: The fulltext_origin of this Work.
        :rtype: str.
        """
        return self._fulltext_origin

    @fulltext_origin.setter
    def fulltext_origin(self, fulltext_origin):
        """Sets the fulltext_origin of this Work.
        How we got the fulltext
        :param fulltext_origin: The fulltext_origin of this Work.
        :type: str.
        """
        allowed_values = ["pdf", "ngrams"]
        if fulltext_origin not in allowed_values:
            raise ValueError(
                f"Invalid value for `fulltext_origin` ({fulltext_origin}), must be one of {allowed_values}"
            )
        self._fulltext_origin = fulltext_origin

    @property
    def cited_by_api_url(self):
        """Gets the cited_by_api_url of this Work.
        API URL to get works that cite this work
        :return: The cited_by_api_url of this Work.
        :rtype: str.
        """
        return self._cited_by_api_url

    @cited_by_api_url.setter
    def cited_by_api_url(self, cited_by_api_url):
        """Sets the cited_by_api_url of this Work.
        API URL to get works that cite this work
        :param cited_by_api_url: The cited_by_api_url of this Work.
        :type: str.
        """
        self._cited_by_api_url = cited_by_api_url

    @property
    def counts_by_year(self):
        """Gets the counts_by_year of this Work.
        :return: The counts_by_year of this Work.
        :rtype: CountsByYear.
        """
        return self._counts_by_year

    @counts_by_year.setter
    def counts_by_year(self, counts_by_year):
        """Sets the counts_by_year of this Work.
        :param counts_by_year: The counts_by_year of this Work.
        :type: CountsByYear.
        """
        self._counts_by_year = counts_by_year

    @property
    def updated_date(self):
        """Gets the updated_date of this Work.
        :return: The updated_date of this Work.
        :rtype: datetime.
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this Work.
        :param updated_date: The updated_date of this Work.
        :type: datetime.
        """
        self._updated_date = updated_date

    @property
    def created_date(self):
        """Gets the created_date of this Work.
        :return: The created_date of this Work.
        :rtype: date.
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this Work.
        :param created_date: The created_date of this Work.
        :type: date.
        """
        self._created_date = created_date

    @property
    def abstract_inverted_index(self):
        """Gets the abstract_inverted_index of this Work.
        Abstract as inverted index
        :return: The abstract_inverted_index of this Work.
        :rtype: dict(str, list[int]).
        """
        return self._abstract_inverted_index

    @abstract_inverted_index.setter
    def abstract_inverted_index(self, abstract_inverted_index):
        """Sets the abstract_inverted_index of this Work.
        Abstract as inverted index
        :param abstract_inverted_index: The abstract_inverted_index of this Work.
        :type: dict(str, list[int]).
        """
        self._abstract_inverted_index = abstract_inverted_index

    @property
    def language(self):
        """Gets the language of this Work.
        ISO 639-1 language code
        :return: The language of this Work.
        :rtype: str.
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Work.
        ISO 639-1 language code
        :param language: The language of this Work.
        :type: str.
        """
        self._language = language

    @property
    def license(self):
        """Gets the license of this Work.
        License at primary location
        :return: The license of this Work.
        :rtype: str.
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this Work.
        License at primary location
        :param license: The license of this Work.
        :type: str.
        """
        self._license = license

    @property
    def referenced_works(self):
        """Gets the referenced_works of this Work.
        OpenAlex IDs of works cited by this work
        :return: The referenced_works of this Work.
        :rtype: list[str].
        """
        return self._referenced_works

    @referenced_works.setter
    def referenced_works(self, referenced_works):
        """Sets the referenced_works of this Work.
        OpenAlex IDs of works cited by this work
        :param referenced_works: The referenced_works of this Work.
        :type: list[str].
        """
        self._referenced_works = referenced_works

    @property
    def related_works(self):
        """Gets the related_works of this Work.
        OpenAlex IDs of related works
        :return: The related_works of this Work.
        :rtype: list[str].
        """
        return self._related_works

    @related_works.setter
    def related_works(self, related_works):
        """Sets the related_works of this Work.
        OpenAlex IDs of related works
        :param related_works: The related_works of this Work.
        :type: list[str].
        """
        self._related_works = related_works

    @property
    def sustainable_development_goals(self):
        """Gets the sustainable_development_goals of this Work.
        :return: The sustainable_development_goals of this Work.
        :rtype: list[SustainableDevelopmentGoal].
        """
        return self._sustainable_development_goals

    @sustainable_development_goals.setter
    def sustainable_development_goals(self, sustainable_development_goals):
        """Sets the sustainable_development_goals of this Work.
        :param sustainable_development_goals: The sustainable_development_goals of this Work.
        :type: list[SustainableDevelopmentGoal].
        """
        self._sustainable_development_goals = sustainable_development_goals

    @property
    def ids(self):
        """Gets the ids of this Work.
        :return: The ids of this Work.
        :rtype: WorkIds.
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this Work.
        :param ids: The ids of this Work.
        :type: WorkIds.
        """
        self._ids = ids

    def to_dict(self):
        """Returns the model properties as a dict."""
        result = {}
        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = [x.to_dict() if hasattr(x, "to_dict") else x for x in value]
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(Work, dict):
            for key, value in self.items():
                result[key] = value
        return result

    def to_str(self):
        """Returns the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal."""
        if not isinstance(other, Work):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal."""
        return not self == other

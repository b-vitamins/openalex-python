"""OpenAlex API
OpenAlex is a fully open catalog of the global research system. It's named after the ancient Library of Alexandria and made by the nonprofit OurResearch.  The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day.  For best performance, add your email to all API requests to join the polite pool using either: - The `mailto` query parameter (e.g., `mailto=you@example.com`) - The `User-Agent` header with mailto (e.g., `User-Agent: MyApp/1.0 (mailto:you@example.com)`)  Premium users get an API key which grants higher API limits and access to special filters.
OpenAPI spec version: 1.0.0
Generated by: https://github.com/swagger-api/swagger-codegen.git.
"""

import pprint

import six


class DehydratedConcept:
    """NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "id": "str",
        "display_name": "str",
        "level": "int",
        "score": "float",
        "wikidata": "str",
    }
    attribute_map = {
        "id": "id",
        "display_name": "display_name",
        "level": "level",
        "score": "score",
        "wikidata": "wikidata",
    }

    def __init__(
        self, id=None, display_name=None, level=None, score=None, wikidata=None
    ):
        """DehydratedConcept - a model defined in Swagger."""
        self._id = None
        self._display_name = None
        self._level = None
        self._score = None
        self._wikidata = None
        self.discriminator = None
        self.id = id
        self.display_name = display_name
        if level is not None:
            self.level = level
        if score is not None:
            self.score = score
        if wikidata is not None:
            self.wikidata = wikidata

    @property
    def id(self):
        """Gets the id of this DehydratedConcept.
        :return: The id of this DehydratedConcept.
        :rtype: str.
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DehydratedConcept.
        :param id: The id of this DehydratedConcept.
        :type: str.
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        self._id = id

    @property
    def display_name(self):
        """Gets the display_name of this DehydratedConcept.
        :return: The display_name of this DehydratedConcept.
        :rtype: str.
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this DehydratedConcept.
        :param display_name: The display_name of this DehydratedConcept.
        :type: str.
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")
        self._display_name = display_name

    @property
    def level(self):
        """Gets the level of this DehydratedConcept.
        :return: The level of this DehydratedConcept.
        :rtype: int.
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this DehydratedConcept.
        :param level: The level of this DehydratedConcept.
        :type: int.
        """
        self._level = level

    @property
    def score(self):
        """Gets the score of this DehydratedConcept.
        Strength of association (when part of a work)
        :return: The score of this DehydratedConcept.
        :rtype: float.
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this DehydratedConcept.
        Strength of association (when part of a work)
        :param score: The score of this DehydratedConcept.
        :type: float.
        """
        self._score = score

    @property
    def wikidata(self):
        """Gets the wikidata of this DehydratedConcept.
        :return: The wikidata of this DehydratedConcept.
        :rtype: str.
        """
        return self._wikidata

    @wikidata.setter
    def wikidata(self, wikidata):
        """Sets the wikidata of this DehydratedConcept.
        :param wikidata: The wikidata of this DehydratedConcept.
        :type: str.
        """
        self._wikidata = wikidata

    def to_dict(self):
        """Returns the model properties as a dict."""
        result = {}
        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = [x.to_dict() if hasattr(x, "to_dict") else x for x in value]
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(DehydratedConcept, dict):
            for key, value in self.items():
                result[key] = value
        return result

    def to_str(self):
        """Returns the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal."""
        if not isinstance(other, DehydratedConcept):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal."""
        return not self == other

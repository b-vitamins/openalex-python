"""OpenAlex API
OpenAlex is a fully open catalog of the global research system. It's named after the ancient Library of Alexandria and made by the nonprofit OurResearch.  The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day.  For best performance, add your email to all API requests to join the polite pool using either: - The `mailto` query parameter (e.g., `mailto=you@example.com`) - The `User-Agent` header with mailto (e.g., `User-Agent: MyApp/1.0 (mailto:you@example.com)`)  Premium users get an API key which grants higher API limits and access to special filters.
OpenAPI spec version: 1.0.0
Generated by: https://github.com/swagger-api/swagger-codegen.git.
"""

import pprint

import six


class Role:
    """NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"role": "str", "id": "str", "works_count": "int"}
    attribute_map = {"role": "role", "id": "id", "works_count": "works_count"}

    def __init__(self, role=None, id=None, works_count=None):
        """Role - a model defined in Swagger."""
        self._role = None
        self._id = None
        self._works_count = None
        self.discriminator = None
        self.role = role
        self.id = id
        self.works_count = works_count

    @property
    def role(self):
        """Gets the role of this Role.
        :return: The role of this Role.
        :rtype: str.
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Role.
        :param role: The role of this Role.
        :type: str.
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")
        allowed_values = ["institution", "funder", "publisher"]
        if role not in allowed_values:
            raise ValueError(
                f"Invalid value for `role` ({role}), must be one of {allowed_values}"
            )
        self._role = role

    @property
    def id(self):
        """Gets the id of this Role.
        :return: The id of this Role.
        :rtype: str.
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Role.
        :param id: The id of this Role.
        :type: str.
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        self._id = id

    @property
    def works_count(self):
        """Gets the works_count of this Role.
        :return: The works_count of this Role.
        :rtype: int.
        """
        return self._works_count

    @works_count.setter
    def works_count(self, works_count):
        """Sets the works_count of this Role.
        :param works_count: The works_count of this Role.
        :type: int.
        """
        if works_count is None:
            raise ValueError("Invalid value for `works_count`, must not be `None`")
        self._works_count = works_count

    def to_dict(self):
        """Returns the model properties as a dict."""
        result = {}
        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = [x.to_dict() if hasattr(x, "to_dict") else x for x in value]
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(Role, dict):
            for key, value in self.items():
                result[key] = value
        return result

    def to_str(self):
        """Returns the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal."""
        if not isinstance(other, Role):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal."""
        return not self == other

"""OpenAlex API
OpenAlex is a fully open catalog of the global research system. It's named after the ancient Library of Alexandria and made by the nonprofit OurResearch.  The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day.  For best performance, add your email to all API requests to join the polite pool using either: - The `mailto` query parameter (e.g., `mailto=you@example.com`) - The `User-Agent` header with mailto (e.g., `User-Agent: MyApp/1.0 (mailto:you@example.com)`)  Premium users get an API key which grants higher API limits and access to special filters.
OpenAPI spec version: 1.0.0
Generated by: https://github.com/swagger-api/swagger-codegen.git.
"""

import pprint

import six


class OpenAccess:
    """NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "is_oa": "bool",
        "oa_status": "str",
        "oa_url": "str",
        "any_repository_has_fulltext": "bool",
    }
    attribute_map = {
        "is_oa": "is_oa",
        "oa_status": "oa_status",
        "oa_url": "oa_url",
        "any_repository_has_fulltext": "any_repository_has_fulltext",
    }

    def __init__(
        self, is_oa=None, oa_status=None, oa_url=None, any_repository_has_fulltext=None
    ):
        """OpenAccess - a model defined in Swagger."""
        self._is_oa = None
        self._oa_status = None
        self._oa_url = None
        self._any_repository_has_fulltext = None
        self.discriminator = None
        self.is_oa = is_oa
        self.oa_status = oa_status
        if oa_url is not None:
            self.oa_url = oa_url
        if any_repository_has_fulltext is not None:
            self.any_repository_has_fulltext = any_repository_has_fulltext

    @property
    def is_oa(self):
        """Gets the is_oa of this OpenAccess.
        Whether this work is Open Access
        :return: The is_oa of this OpenAccess.
        :rtype: bool.
        """
        return self._is_oa

    @is_oa.setter
    def is_oa(self, is_oa):
        """Sets the is_oa of this OpenAccess.
        Whether this work is Open Access
        :param is_oa: The is_oa of this OpenAccess.
        :type: bool.
        """
        if is_oa is None:
            raise ValueError("Invalid value for `is_oa`, must not be `None`")
        self._is_oa = is_oa

    @property
    def oa_status(self):
        """Gets the oa_status of this OpenAccess.
        The Open Access status
        :return: The oa_status of this OpenAccess.
        :rtype: str.
        """
        return self._oa_status

    @oa_status.setter
    def oa_status(self, oa_status):
        """Sets the oa_status of this OpenAccess.
        The Open Access status
        :param oa_status: The oa_status of this OpenAccess.
        :type: str.
        """
        if oa_status is None:
            raise ValueError("Invalid value for `oa_status`, must not be `None`")
        allowed_values = ["diamond", "gold", "green", "hybrid", "bronze", "closed"]
        if oa_status not in allowed_values:
            raise ValueError(
                f"Invalid value for `oa_status` ({oa_status}), must be one of {allowed_values}"
            )
        self._oa_status = oa_status

    @property
    def oa_url(self):
        """Gets the oa_url of this OpenAccess.
        The best Open Access URL for this work
        :return: The oa_url of this OpenAccess.
        :rtype: str.
        """
        return self._oa_url

    @oa_url.setter
    def oa_url(self, oa_url):
        """Sets the oa_url of this OpenAccess.
        The best Open Access URL for this work
        :param oa_url: The oa_url of this OpenAccess.
        :type: str.
        """
        self._oa_url = oa_url

    @property
    def any_repository_has_fulltext(self):
        """Gets the any_repository_has_fulltext of this OpenAccess.
        Whether any repository has fulltext
        :return: The any_repository_has_fulltext of this OpenAccess.
        :rtype: bool.
        """
        return self._any_repository_has_fulltext

    @any_repository_has_fulltext.setter
    def any_repository_has_fulltext(self, any_repository_has_fulltext):
        """Sets the any_repository_has_fulltext of this OpenAccess.
        Whether any repository has fulltext
        :param any_repository_has_fulltext: The any_repository_has_fulltext of this OpenAccess.
        :type: bool.
        """
        self._any_repository_has_fulltext = any_repository_has_fulltext

    def to_dict(self):
        """Returns the model properties as a dict."""
        result = {}
        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = [x.to_dict() if hasattr(x, "to_dict") else x for x in value]
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(OpenAccess, dict):
            for key, value in self.items():
                result[key] = value
        return result

    def to_str(self):
        """Returns the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal."""
        if not isinstance(other, OpenAccess):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal."""
        return not self == other

"""OpenAlex API
OpenAlex is a fully open catalog of the global research system. It's named after the ancient Library of Alexandria and made by the nonprofit OurResearch.  The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day.  For best performance, add your email to all API requests to join the polite pool using either: - The `mailto` query parameter (e.g., `mailto=you@example.com`) - The `User-Agent` header with mailto (e.g., `User-Agent: MyApp/1.0 (mailto:you@example.com)`)  Premium users get an API key which grants higher API limits and access to special filters.
OpenAPI spec version: 1.0.0
Generated by: https://github.com/swagger-api/swagger-codegen.git.
"""

import pprint

import six


class ErrorResponse:
    """NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"error": "str", "message": "str"}
    attribute_map = {"error": "error", "message": "message"}

    def __init__(self, error=None, message=None):
        """ErrorResponse - a model defined in Swagger."""
        self._error = None
        self._message = None
        self.discriminator = None
        self.error = error
        self.message = message

    @property
    def error(self):
        """Gets the error of this ErrorResponse.
        Error code
        :return: The error of this ErrorResponse.
        :rtype: str.
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ErrorResponse.
        Error code
        :param error: The error of this ErrorResponse.
        :type: str.
        """
        if error is None:
            raise ValueError("Invalid value for `error`, must not be `None`")
        self._error = error

    @property
    def message(self):
        """Gets the message of this ErrorResponse.
        Human-readable error message
        :return: The message of this ErrorResponse.
        :rtype: str.
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ErrorResponse.
        Human-readable error message
        :param message: The message of this ErrorResponse.
        :type: str.
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")
        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict."""
        result = {}
        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = [x.to_dict() if hasattr(x, "to_dict") else x for x in value]
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(ErrorResponse, dict):
            for key, value in self.items():
                result[key] = value
        return result

    def to_str(self):
        """Returns the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal."""
        if not isinstance(other, ErrorResponse):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal."""
        return not self == other

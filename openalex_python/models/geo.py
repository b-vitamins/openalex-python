"""OpenAlex API
OpenAlex is a fully open catalog of the global research system. It's named after the ancient Library of Alexandria and made by the nonprofit OurResearch.  The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day.  For best performance, add your email to all API requests to join the polite pool using either: - The `mailto` query parameter (e.g., `mailto=you@example.com`) - The `User-Agent` header with mailto (e.g., `User-Agent: MyApp/1.0 (mailto:you@example.com)`)  Premium users get an API key which grants higher API limits and access to special filters.
OpenAPI spec version: 1.0.0
Generated by: https://github.com/swagger-api/swagger-codegen.git.
"""

import pprint

import six


class Geo:
    """NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "city": "str",
        "geonames_city_id": "str",
        "region": "str",
        "country_code": "str",
        "country": "str",
        "latitude": "float",
        "longitude": "float",
    }
    attribute_map = {
        "city": "city",
        "geonames_city_id": "geonames_city_id",
        "region": "region",
        "country_code": "country_code",
        "country": "country",
        "latitude": "latitude",
        "longitude": "longitude",
    }

    def __init__(
        self,
        city=None,
        geonames_city_id=None,
        region=None,
        country_code=None,
        country=None,
        latitude=None,
        longitude=None,
    ):
        """Geo - a model defined in Swagger."""
        self._city = None
        self._geonames_city_id = None
        self._region = None
        self._country_code = None
        self._country = None
        self._latitude = None
        self._longitude = None
        self.discriminator = None
        if city is not None:
            self.city = city
        if geonames_city_id is not None:
            self.geonames_city_id = geonames_city_id
        if region is not None:
            self.region = region
        if country_code is not None:
            self.country_code = country_code
        if country is not None:
            self.country = country
        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude

    @property
    def city(self):
        """Gets the city of this Geo.
        :return: The city of this Geo.
        :rtype: str.
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Geo.
        :param city: The city of this Geo.
        :type: str.
        """
        self._city = city

    @property
    def geonames_city_id(self):
        """Gets the geonames_city_id of this Geo.
        :return: The geonames_city_id of this Geo.
        :rtype: str.
        """
        return self._geonames_city_id

    @geonames_city_id.setter
    def geonames_city_id(self, geonames_city_id):
        """Sets the geonames_city_id of this Geo.
        :param geonames_city_id: The geonames_city_id of this Geo.
        :type: str.
        """
        self._geonames_city_id = geonames_city_id

    @property
    def region(self):
        """Gets the region of this Geo.
        :return: The region of this Geo.
        :rtype: str.
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Geo.
        :param region: The region of this Geo.
        :type: str.
        """
        self._region = region

    @property
    def country_code(self):
        """Gets the country_code of this Geo.
        :return: The country_code of this Geo.
        :rtype: str.
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Geo.
        :param country_code: The country_code of this Geo.
        :type: str.
        """
        self._country_code = country_code

    @property
    def country(self):
        """Gets the country of this Geo.
        :return: The country of this Geo.
        :rtype: str.
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Geo.
        :param country: The country of this Geo.
        :type: str.
        """
        self._country = country

    @property
    def latitude(self):
        """Gets the latitude of this Geo.
        :return: The latitude of this Geo.
        :rtype: float.
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this Geo.
        :param latitude: The latitude of this Geo.
        :type: float.
        """
        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this Geo.
        :return: The longitude of this Geo.
        :rtype: float.
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this Geo.
        :param longitude: The longitude of this Geo.
        :type: float.
        """
        self._longitude = longitude

    def to_dict(self):
        """Returns the model properties as a dict."""
        result = {}
        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = [x.to_dict() if hasattr(x, "to_dict") else x for x in value]
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(Geo, dict):
            for key, value in self.items():
                result[key] = value
        return result

    def to_str(self):
        """Returns the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal."""
        if not isinstance(other, Geo):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal."""
        return not self == other

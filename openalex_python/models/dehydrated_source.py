"""OpenAlex API
OpenAlex is a fully open catalog of the global research system. It's named after the ancient Library of Alexandria and made by the nonprofit OurResearch.  The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day.  For best performance, add your email to all API requests to join the polite pool using either: - The `mailto` query parameter (e.g., `mailto=you@example.com`) - The `User-Agent` header with mailto (e.g., `User-Agent: MyApp/1.0 (mailto:you@example.com)`)  Premium users get an API key which grants higher API limits and access to special filters.
OpenAPI spec version: 1.0.0
Generated by: https://github.com/swagger-api/swagger-codegen.git.
"""

import pprint

import six


class DehydratedSource:
    """NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "id": "str",
        "display_name": "str",
        "issn_l": "str",
        "issn": "list[str]",
        "is_oa": "bool",
        "is_in_doaj": "bool",
        "is_core": "bool",
        "host_organization": "str",
        "host_organization_name": "str",
        "host_organization_lineage": "list[str]",
        "type": "str",
    }
    attribute_map = {
        "id": "id",
        "display_name": "display_name",
        "issn_l": "issn_l",
        "issn": "issn",
        "is_oa": "is_oa",
        "is_in_doaj": "is_in_doaj",
        "is_core": "is_core",
        "host_organization": "host_organization",
        "host_organization_name": "host_organization_name",
        "host_organization_lineage": "host_organization_lineage",
        "type": "type",
    }

    def __init__(
        self,
        id=None,
        display_name=None,
        issn_l=None,
        issn=None,
        is_oa=None,
        is_in_doaj=None,
        is_core=None,
        host_organization=None,
        host_organization_name=None,
        host_organization_lineage=None,
        type=None,
    ):
        """DehydratedSource - a model defined in Swagger."""
        self._id = None
        self._display_name = None
        self._issn_l = None
        self._issn = None
        self._is_oa = None
        self._is_in_doaj = None
        self._is_core = None
        self._host_organization = None
        self._host_organization_name = None
        self._host_organization_lineage = None
        self._type = None
        self.discriminator = None
        self.id = id
        if display_name is not None:
            self.display_name = display_name
        if issn_l is not None:
            self.issn_l = issn_l
        if issn is not None:
            self.issn = issn
        if is_oa is not None:
            self.is_oa = is_oa
        if is_in_doaj is not None:
            self.is_in_doaj = is_in_doaj
        if is_core is not None:
            self.is_core = is_core
        if host_organization is not None:
            self.host_organization = host_organization
        if host_organization_name is not None:
            self.host_organization_name = host_organization_name
        if host_organization_lineage is not None:
            self.host_organization_lineage = host_organization_lineage
        if type is not None:
            self.type = type

    @property
    def id(self):
        """Gets the id of this DehydratedSource.
        :return: The id of this DehydratedSource.
        :rtype: str.
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DehydratedSource.
        :param id: The id of this DehydratedSource.
        :type: str.
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        self._id = id

    @property
    def display_name(self):
        """Gets the display_name of this DehydratedSource.
        :return: The display_name of this DehydratedSource.
        :rtype: str.
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this DehydratedSource.
        :param display_name: The display_name of this DehydratedSource.
        :type: str.
        """
        self._display_name = display_name

    @property
    def issn_l(self):
        """Gets the issn_l of this DehydratedSource.
        :return: The issn_l of this DehydratedSource.
        :rtype: str.
        """
        return self._issn_l

    @issn_l.setter
    def issn_l(self, issn_l):
        """Sets the issn_l of this DehydratedSource.
        :param issn_l: The issn_l of this DehydratedSource.
        :type: str.
        """
        self._issn_l = issn_l

    @property
    def issn(self):
        """Gets the issn of this DehydratedSource.
        :return: The issn of this DehydratedSource.
        :rtype: list[str].
        """
        return self._issn

    @issn.setter
    def issn(self, issn):
        """Sets the issn of this DehydratedSource.
        :param issn: The issn of this DehydratedSource.
        :type: list[str].
        """
        self._issn = issn

    @property
    def is_oa(self):
        """Gets the is_oa of this DehydratedSource.
        :return: The is_oa of this DehydratedSource.
        :rtype: bool.
        """
        return self._is_oa

    @is_oa.setter
    def is_oa(self, is_oa):
        """Sets the is_oa of this DehydratedSource.
        :param is_oa: The is_oa of this DehydratedSource.
        :type: bool.
        """
        self._is_oa = is_oa

    @property
    def is_in_doaj(self):
        """Gets the is_in_doaj of this DehydratedSource.
        :return: The is_in_doaj of this DehydratedSource.
        :rtype: bool.
        """
        return self._is_in_doaj

    @is_in_doaj.setter
    def is_in_doaj(self, is_in_doaj):
        """Sets the is_in_doaj of this DehydratedSource.
        :param is_in_doaj: The is_in_doaj of this DehydratedSource.
        :type: bool.
        """
        self._is_in_doaj = is_in_doaj

    @property
    def is_core(self):
        """Gets the is_core of this DehydratedSource.
        :return: The is_core of this DehydratedSource.
        :rtype: bool.
        """
        return self._is_core

    @is_core.setter
    def is_core(self, is_core):
        """Sets the is_core of this DehydratedSource.
        :param is_core: The is_core of this DehydratedSource.
        :type: bool.
        """
        self._is_core = is_core

    @property
    def host_organization(self):
        """Gets the host_organization of this DehydratedSource.
        :return: The host_organization of this DehydratedSource.
        :rtype: str.
        """
        return self._host_organization

    @host_organization.setter
    def host_organization(self, host_organization):
        """Sets the host_organization of this DehydratedSource.
        :param host_organization: The host_organization of this DehydratedSource.
        :type: str.
        """
        self._host_organization = host_organization

    @property
    def host_organization_name(self):
        """Gets the host_organization_name of this DehydratedSource.
        :return: The host_organization_name of this DehydratedSource.
        :rtype: str.
        """
        return self._host_organization_name

    @host_organization_name.setter
    def host_organization_name(self, host_organization_name):
        """Sets the host_organization_name of this DehydratedSource.
        :param host_organization_name: The host_organization_name of this DehydratedSource.
        :type: str.
        """
        self._host_organization_name = host_organization_name

    @property
    def host_organization_lineage(self):
        """Gets the host_organization_lineage of this DehydratedSource.
        :return: The host_organization_lineage of this DehydratedSource.
        :rtype: list[str].
        """
        return self._host_organization_lineage

    @host_organization_lineage.setter
    def host_organization_lineage(self, host_organization_lineage):
        """Sets the host_organization_lineage of this DehydratedSource.
        :param host_organization_lineage: The host_organization_lineage of this DehydratedSource.
        :type: list[str].
        """
        self._host_organization_lineage = host_organization_lineage

    @property
    def type(self):
        """Gets the type of this DehydratedSource.
        :return: The type of this DehydratedSource.
        :rtype: str.
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DehydratedSource.
        :param type: The type of this DehydratedSource.
        :type: str.
        """
        allowed_values = [
            "journal",
            "repository",
            "conference",
            "ebook-platform",
            "book-series",
            "metadata",
            "other",
        ]
        if type not in allowed_values:
            raise ValueError(
                f"Invalid value for `type` ({type}), must be one of {allowed_values}"
            )
        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict."""
        result = {}
        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = [x.to_dict() if hasattr(x, "to_dict") else x for x in value]
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(DehydratedSource, dict):
            for key, value in self.items():
                result[key] = value
        return result

    def to_str(self):
        """Returns the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal."""
        if not isinstance(other, DehydratedSource):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal."""
        return not self == other

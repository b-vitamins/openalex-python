"""OpenAlex API
OpenAlex is a fully open catalog of the global research system. It's named after the ancient Library of Alexandria and made by the nonprofit OurResearch.  The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day.  For best performance, add your email to all API requests to join the polite pool using either: - The `mailto` query parameter (e.g., `mailto=you@example.com`) - The `User-Agent` header with mailto (e.g., `User-Agent: MyApp/1.0 (mailto:you@example.com)`)  Premium users get an API key which grants higher API limits and access to special filters.
OpenAPI spec version: 1.0.0
Generated by: https://github.com/swagger-api/swagger-codegen.git.
"""

import pprint

import six


class Keyword:
    """NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "id": "str",
        "display_name": "str",
        "works_count": "int",
        "cited_by_count": "int",
        "updated_date": "datetime",
        "created_date": "date",
    }
    attribute_map = {
        "id": "id",
        "display_name": "display_name",
        "works_count": "works_count",
        "cited_by_count": "cited_by_count",
        "updated_date": "updated_date",
        "created_date": "created_date",
    }

    def __init__(
        self,
        id=None,
        display_name=None,
        works_count=None,
        cited_by_count=None,
        updated_date=None,
        created_date=None,
    ):
        """Keyword - a model defined in Swagger."""
        self._id = None
        self._display_name = None
        self._works_count = None
        self._cited_by_count = None
        self._updated_date = None
        self._created_date = None
        self.discriminator = None
        self.id = id
        self.display_name = display_name
        if works_count is not None:
            self.works_count = works_count
        if cited_by_count is not None:
            self.cited_by_count = cited_by_count
        if updated_date is not None:
            self.updated_date = updated_date
        if created_date is not None:
            self.created_date = created_date

    @property
    def id(self):
        """Gets the id of this Keyword.
        :return: The id of this Keyword.
        :rtype: str.
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Keyword.
        :param id: The id of this Keyword.
        :type: str.
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        self._id = id

    @property
    def display_name(self):
        """Gets the display_name of this Keyword.
        :return: The display_name of this Keyword.
        :rtype: str.
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Keyword.
        :param display_name: The display_name of this Keyword.
        :type: str.
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")
        self._display_name = display_name

    @property
    def works_count(self):
        """Gets the works_count of this Keyword.
        :return: The works_count of this Keyword.
        :rtype: int.
        """
        return self._works_count

    @works_count.setter
    def works_count(self, works_count):
        """Sets the works_count of this Keyword.
        :param works_count: The works_count of this Keyword.
        :type: int.
        """
        self._works_count = works_count

    @property
    def cited_by_count(self):
        """Gets the cited_by_count of this Keyword.
        :return: The cited_by_count of this Keyword.
        :rtype: int.
        """
        return self._cited_by_count

    @cited_by_count.setter
    def cited_by_count(self, cited_by_count):
        """Sets the cited_by_count of this Keyword.
        :param cited_by_count: The cited_by_count of this Keyword.
        :type: int.
        """
        self._cited_by_count = cited_by_count

    @property
    def updated_date(self):
        """Gets the updated_date of this Keyword.
        :return: The updated_date of this Keyword.
        :rtype: datetime.
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this Keyword.
        :param updated_date: The updated_date of this Keyword.
        :type: datetime.
        """
        self._updated_date = updated_date

    @property
    def created_date(self):
        """Gets the created_date of this Keyword.
        :return: The created_date of this Keyword.
        :rtype: date.
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this Keyword.
        :param created_date: The created_date of this Keyword.
        :type: date.
        """
        self._created_date = created_date

    def to_dict(self):
        """Returns the model properties as a dict."""
        result = {}
        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = [x.to_dict() if hasattr(x, "to_dict") else x for x in value]
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(Keyword, dict):
            for key, value in self.items():
                result[key] = value
        return result

    def to_str(self):
        """Returns the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal."""
        if not isinstance(other, Keyword):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal."""
        return not self == other

"""OpenAlex API
OpenAlex is a fully open catalog of the global research system. It's named after the ancient Library of Alexandria and made by the nonprofit OurResearch.  The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day.  For best performance, add your email to all API requests to join the polite pool using either: - The `mailto` query parameter (e.g., `mailto=you@example.com`) - The `User-Agent` header with mailto (e.g., `User-Agent: MyApp/1.0 (mailto:you@example.com)`)  Premium users get an API key which grants higher API limits and access to special filters.
OpenAPI spec version: 1.0.0
Generated by: https://github.com/swagger-api/swagger-codegen.git.
"""

import pprint

import six


class SourceSocieties:
    """NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"url": "str", "organization": "str"}
    attribute_map = {"url": "url", "organization": "organization"}

    def __init__(self, url=None, organization=None):
        """SourceSocieties - a model defined in Swagger."""
        self._url = None
        self._organization = None
        self.discriminator = None
        if url is not None:
            self.url = url
        if organization is not None:
            self.organization = organization

    @property
    def url(self):
        """Gets the url of this SourceSocieties.
        :return: The url of this SourceSocieties.
        :rtype: str.
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this SourceSocieties.
        :param url: The url of this SourceSocieties.
        :type: str.
        """
        self._url = url

    @property
    def organization(self):
        """Gets the organization of this SourceSocieties.
        :return: The organization of this SourceSocieties.
        :rtype: str.
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this SourceSocieties.
        :param organization: The organization of this SourceSocieties.
        :type: str.
        """
        self._organization = organization

    def to_dict(self):
        """Returns the model properties as a dict."""
        result = {}
        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = [x.to_dict() if hasattr(x, "to_dict") else x for x in value]
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(SourceSocieties, dict):
            for key, value in self.items():
                result[key] = value
        return result

    def to_str(self):
        """Returns the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal."""
        if not isinstance(other, SourceSocieties):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal."""
        return not self == other

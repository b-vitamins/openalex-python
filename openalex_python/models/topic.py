"""OpenAlex API
OpenAlex is a fully open catalog of the global research system. It's named after the ancient Library of Alexandria and made by the nonprofit OurResearch.  The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day.  For best performance, add your email to all API requests to join the polite pool using either: - The `mailto` query parameter (e.g., `mailto=you@example.com`) - The `User-Agent` header with mailto (e.g., `User-Agent: MyApp/1.0 (mailto:you@example.com)`)  Premium users get an API key which grants higher API limits and access to special filters.
OpenAPI spec version: 1.0.0
Generated by: https://github.com/swagger-api/swagger-codegen.git.
"""

import pprint

import six


class Topic:
    """NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "id": "str",
        "display_name": "str",
        "description": "str",
        "keywords": "list[str]",
        "subfield": "TopicLevel",
        "field": "TopicLevel",
        "domain": "TopicLevel",
        "works_count": "int",
        "cited_by_count": "int",
        "updated_date": "datetime",
        "created_date": "date",
        "ids": "TopicIds",
    }
    attribute_map = {
        "id": "id",
        "display_name": "display_name",
        "description": "description",
        "keywords": "keywords",
        "subfield": "subfield",
        "field": "field",
        "domain": "domain",
        "works_count": "works_count",
        "cited_by_count": "cited_by_count",
        "updated_date": "updated_date",
        "created_date": "created_date",
        "ids": "ids",
    }

    def __init__(
        self,
        id=None,
        display_name=None,
        description=None,
        keywords=None,
        subfield=None,
        field=None,
        domain=None,
        works_count=None,
        cited_by_count=None,
        updated_date=None,
        created_date=None,
        ids=None,
    ):
        """Topic - a model defined in Swagger."""
        self._id = None
        self._display_name = None
        self._description = None
        self._keywords = None
        self._subfield = None
        self._field = None
        self._domain = None
        self._works_count = None
        self._cited_by_count = None
        self._updated_date = None
        self._created_date = None
        self._ids = None
        self.discriminator = None
        self.id = id
        self.display_name = display_name
        if description is not None:
            self.description = description
        if keywords is not None:
            self.keywords = keywords
        if subfield is not None:
            self.subfield = subfield
        if field is not None:
            self.field = field
        if domain is not None:
            self.domain = domain
        if works_count is not None:
            self.works_count = works_count
        if cited_by_count is not None:
            self.cited_by_count = cited_by_count
        if updated_date is not None:
            self.updated_date = updated_date
        if created_date is not None:
            self.created_date = created_date
        if ids is not None:
            self.ids = ids

    @property
    def id(self):
        """Gets the id of this Topic.
        :return: The id of this Topic.
        :rtype: str.
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Topic.
        :param id: The id of this Topic.
        :type: str.
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        self._id = id

    @property
    def display_name(self):
        """Gets the display_name of this Topic.
        :return: The display_name of this Topic.
        :rtype: str.
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Topic.
        :param display_name: The display_name of this Topic.
        :type: str.
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")
        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this Topic.
        AI-generated description of the topic
        :return: The description of this Topic.
        :rtype: str.
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Topic.
        AI-generated description of the topic
        :param description: The description of this Topic.
        :type: str.
        """
        self._description = description

    @property
    def keywords(self):
        """Gets the keywords of this Topic.
        Keywords for this topic
        :return: The keywords of this Topic.
        :rtype: list[str].
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this Topic.
        Keywords for this topic
        :param keywords: The keywords of this Topic.
        :type: list[str].
        """
        self._keywords = keywords

    @property
    def subfield(self):
        """Gets the subfield of this Topic.
        :return: The subfield of this Topic.
        :rtype: TopicLevel.
        """
        return self._subfield

    @subfield.setter
    def subfield(self, subfield):
        """Sets the subfield of this Topic.
        :param subfield: The subfield of this Topic.
        :type: TopicLevel.
        """
        self._subfield = subfield

    @property
    def field(self):
        """Gets the field of this Topic.
        :return: The field of this Topic.
        :rtype: TopicLevel.
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this Topic.
        :param field: The field of this Topic.
        :type: TopicLevel.
        """
        self._field = field

    @property
    def domain(self):
        """Gets the domain of this Topic.
        :return: The domain of this Topic.
        :rtype: TopicLevel.
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this Topic.
        :param domain: The domain of this Topic.
        :type: TopicLevel.
        """
        self._domain = domain

    @property
    def works_count(self):
        """Gets the works_count of this Topic.
        :return: The works_count of this Topic.
        :rtype: int.
        """
        return self._works_count

    @works_count.setter
    def works_count(self, works_count):
        """Sets the works_count of this Topic.
        :param works_count: The works_count of this Topic.
        :type: int.
        """
        self._works_count = works_count

    @property
    def cited_by_count(self):
        """Gets the cited_by_count of this Topic.
        :return: The cited_by_count of this Topic.
        :rtype: int.
        """
        return self._cited_by_count

    @cited_by_count.setter
    def cited_by_count(self, cited_by_count):
        """Sets the cited_by_count of this Topic.
        :param cited_by_count: The cited_by_count of this Topic.
        :type: int.
        """
        self._cited_by_count = cited_by_count

    @property
    def updated_date(self):
        """Gets the updated_date of this Topic.
        :return: The updated_date of this Topic.
        :rtype: datetime.
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this Topic.
        :param updated_date: The updated_date of this Topic.
        :type: datetime.
        """
        self._updated_date = updated_date

    @property
    def created_date(self):
        """Gets the created_date of this Topic.
        :return: The created_date of this Topic.
        :rtype: date.
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this Topic.
        :param created_date: The created_date of this Topic.
        :type: date.
        """
        self._created_date = created_date

    @property
    def ids(self):
        """Gets the ids of this Topic.
        :return: The ids of this Topic.
        :rtype: TopicIds.
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this Topic.
        :param ids: The ids of this Topic.
        :type: TopicIds.
        """
        self._ids = ids

    def to_dict(self):
        """Returns the model properties as a dict."""
        result = {}
        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = [x.to_dict() if hasattr(x, "to_dict") else x for x in value]
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(Topic, dict):
            for key, value in self.items():
                result[key] = value
        return result

    def to_str(self):
        """Returns the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal."""
        if not isinstance(other, Topic):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal."""
        return not self == other

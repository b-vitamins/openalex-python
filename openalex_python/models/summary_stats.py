"""OpenAlex API
OpenAlex is a fully open catalog of the global research system. It's named after the ancient Library of Alexandria and made by the nonprofit OurResearch.  The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day.  For best performance, add your email to all API requests to join the polite pool using either: - The `mailto` query parameter (e.g., `mailto=you@example.com`) - The `User-Agent` header with mailto (e.g., `User-Agent: MyApp/1.0 (mailto:you@example.com)`)  Premium users get an API key which grants higher API limits and access to special filters.
OpenAPI spec version: 1.0.0
Generated by: https://github.com/swagger-api/swagger-codegen.git.
"""

import pprint

import six


class SummaryStats:
    """NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "_2yr_mean_citedness": "float",
        "h_index": "int",
        "i10_index": "int",
    }
    attribute_map = {
        "_2yr_mean_citedness": "2yr_mean_citedness",
        "h_index": "h_index",
        "i10_index": "i10_index",
    }

    def __init__(self, _2yr_mean_citedness=None, h_index=None, i10_index=None):
        """SummaryStats - a model defined in Swagger."""
        self.__2yr_mean_citedness = None
        self._h_index = None
        self._i10_index = None
        self.discriminator = None
        if _2yr_mean_citedness is not None:
            self._2yr_mean_citedness = _2yr_mean_citedness
        if h_index is not None:
            self.h_index = h_index
        if i10_index is not None:
            self.i10_index = i10_index

    @property
    def _2yr_mean_citedness(self):
        """Gets the _2yr_mean_citedness of this SummaryStats.
        2-year mean citedness (impact factor)
        :return: The _2yr_mean_citedness of this SummaryStats.
        :rtype: float.
        """
        return self.__2yr_mean_citedness

    @_2yr_mean_citedness.setter
    def _2yr_mean_citedness(self, _2yr_mean_citedness):
        """Sets the _2yr_mean_citedness of this SummaryStats.
        2-year mean citedness (impact factor)
        :param _2yr_mean_citedness: The _2yr_mean_citedness of this SummaryStats.
        :type: float.
        """
        self.__2yr_mean_citedness = _2yr_mean_citedness

    @property
    def h_index(self):
        """Gets the h_index of this SummaryStats.
        The h-index
        :return: The h_index of this SummaryStats.
        :rtype: int.
        """
        return self._h_index

    @h_index.setter
    def h_index(self, h_index):
        """Sets the h_index of this SummaryStats.
        The h-index
        :param h_index: The h_index of this SummaryStats.
        :type: int.
        """
        self._h_index = h_index

    @property
    def i10_index(self):
        """Gets the i10_index of this SummaryStats.
        The i10-index
        :return: The i10_index of this SummaryStats.
        :rtype: int.
        """
        return self._i10_index

    @i10_index.setter
    def i10_index(self, i10_index):
        """Sets the i10_index of this SummaryStats.
        The i10-index
        :param i10_index: The i10_index of this SummaryStats.
        :type: int.
        """
        self._i10_index = i10_index

    def to_dict(self):
        """Returns the model properties as a dict."""
        result = {}
        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = [x.to_dict() if hasattr(x, "to_dict") else x for x in value]
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(SummaryStats, dict):
            for key, value in self.items():
                result[key] = value
        return result

    def to_str(self):
        """Returns the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal."""
        if not isinstance(other, SummaryStats):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal."""
        return not self == other

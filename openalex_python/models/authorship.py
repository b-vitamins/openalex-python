"""OpenAlex API
OpenAlex is a fully open catalog of the global research system. It's named after the ancient Library of Alexandria and made by the nonprofit OurResearch.  The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day.  For best performance, add your email to all API requests to join the polite pool using either: - The `mailto` query parameter (e.g., `mailto=you@example.com`) - The `User-Agent` header with mailto (e.g., `User-Agent: MyApp/1.0 (mailto:you@example.com)`)  Premium users get an API key which grants higher API limits and access to special filters.
OpenAPI spec version: 1.0.0
Generated by: https://github.com/swagger-api/swagger-codegen.git.
"""

import pprint

import six


class Authorship:
    """NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "author_position": "str",
        "author": "DehydratedAuthor",
        "institutions": "list[DehydratedInstitution]",
        "countries": "list[str]",
        "is_corresponding": "bool",
        "raw_author_name": "str",
        "raw_affiliation_strings": "list[str]",
        "affiliations": "list[AuthorshipAffiliations]",
    }
    attribute_map = {
        "author_position": "author_position",
        "author": "author",
        "institutions": "institutions",
        "countries": "countries",
        "is_corresponding": "is_corresponding",
        "raw_author_name": "raw_author_name",
        "raw_affiliation_strings": "raw_affiliation_strings",
        "affiliations": "affiliations",
    }

    def __init__(
        self,
        author_position=None,
        author=None,
        institutions=None,
        countries=None,
        is_corresponding=None,
        raw_author_name=None,
        raw_affiliation_strings=None,
        affiliations=None,
    ):
        """Authorship - a model defined in Swagger."""
        self._author_position = None
        self._author = None
        self._institutions = None
        self._countries = None
        self._is_corresponding = None
        self._raw_author_name = None
        self._raw_affiliation_strings = None
        self._affiliations = None
        self.discriminator = None
        self.author_position = author_position
        self.author = author
        self.institutions = institutions
        self.countries = countries
        if is_corresponding is not None:
            self.is_corresponding = is_corresponding
        if raw_author_name is not None:
            self.raw_author_name = raw_author_name
        if raw_affiliation_strings is not None:
            self.raw_affiliation_strings = raw_affiliation_strings
        if affiliations is not None:
            self.affiliations = affiliations

    @property
    def author_position(self):
        """Gets the author_position of this Authorship.
        :return: The author_position of this Authorship.
        :rtype: str.
        """
        return self._author_position

    @author_position.setter
    def author_position(self, author_position):
        """Sets the author_position of this Authorship.
        :param author_position: The author_position of this Authorship.
        :type: str.
        """
        if author_position is None:
            raise ValueError("Invalid value for `author_position`, must not be `None`")
        allowed_values = ["first", "middle", "last"]
        if author_position not in allowed_values:
            raise ValueError(
                f"Invalid value for `author_position` ({author_position}), must be one of {allowed_values}"
            )
        self._author_position = author_position

    @property
    def author(self):
        """Gets the author of this Authorship.
        :return: The author of this Authorship.
        :rtype: DehydratedAuthor.
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this Authorship.
        :param author: The author of this Authorship.
        :type: DehydratedAuthor.
        """
        if author is None:
            raise ValueError("Invalid value for `author`, must not be `None`")
        self._author = author

    @property
    def institutions(self):
        """Gets the institutions of this Authorship.
        :return: The institutions of this Authorship.
        :rtype: list[DehydratedInstitution].
        """
        return self._institutions

    @institutions.setter
    def institutions(self, institutions):
        """Sets the institutions of this Authorship.
        :param institutions: The institutions of this Authorship.
        :type: list[DehydratedInstitution].
        """
        if institutions is None:
            raise ValueError("Invalid value for `institutions`, must not be `None`")
        self._institutions = institutions

    @property
    def countries(self):
        """Gets the countries of this Authorship.
        :return: The countries of this Authorship.
        :rtype: list[str].
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this Authorship.
        :param countries: The countries of this Authorship.
        :type: list[str].
        """
        if countries is None:
            raise ValueError("Invalid value for `countries`, must not be `None`")
        self._countries = countries

    @property
    def is_corresponding(self):
        """Gets the is_corresponding of this Authorship.
        Whether this is a corresponding author
        :return: The is_corresponding of this Authorship.
        :rtype: bool.
        """
        return self._is_corresponding

    @is_corresponding.setter
    def is_corresponding(self, is_corresponding):
        """Sets the is_corresponding of this Authorship.
        Whether this is a corresponding author
        :param is_corresponding: The is_corresponding of this Authorship.
        :type: bool.
        """
        self._is_corresponding = is_corresponding

    @property
    def raw_author_name(self):
        """Gets the raw_author_name of this Authorship.
        The raw author name as it appears in the source
        :return: The raw_author_name of this Authorship.
        :rtype: str.
        """
        return self._raw_author_name

    @raw_author_name.setter
    def raw_author_name(self, raw_author_name):
        """Sets the raw_author_name of this Authorship.
        The raw author name as it appears in the source
        :param raw_author_name: The raw_author_name of this Authorship.
        :type: str.
        """
        self._raw_author_name = raw_author_name

    @property
    def raw_affiliation_strings(self):
        """Gets the raw_affiliation_strings of this Authorship.
        Raw affiliation strings as they appear in the source
        :return: The raw_affiliation_strings of this Authorship.
        :rtype: list[str].
        """
        return self._raw_affiliation_strings

    @raw_affiliation_strings.setter
    def raw_affiliation_strings(self, raw_affiliation_strings):
        """Sets the raw_affiliation_strings of this Authorship.
        Raw affiliation strings as they appear in the source
        :param raw_affiliation_strings: The raw_affiliation_strings of this Authorship.
        :type: list[str].
        """
        self._raw_affiliation_strings = raw_affiliation_strings

    @property
    def affiliations(self):
        """Gets the affiliations of this Authorship.
        :return: The affiliations of this Authorship.
        :rtype: list[AuthorshipAffiliations].
        """
        return self._affiliations

    @affiliations.setter
    def affiliations(self, affiliations):
        """Sets the affiliations of this Authorship.
        :param affiliations: The affiliations of this Authorship.
        :type: list[AuthorshipAffiliations].
        """
        self._affiliations = affiliations

    def to_dict(self):
        """Returns the model properties as a dict."""
        result = {}
        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = [x.to_dict() if hasattr(x, "to_dict") else x for x in value]
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(Authorship, dict):
            for key, value in self.items():
                result[key] = value
        return result

    def to_str(self):
        """Returns the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal."""
        if not isinstance(other, Authorship):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal."""
        return not self == other

"""OpenAlex API
OpenAlex is a fully open catalog of the global research system. It's named after the ancient Library of Alexandria and made by the nonprofit OurResearch.  The API is the primary way to get OpenAlex data. It's free and requires no authentication. The daily limit for API calls is 100,000 requests per user per day.  For best performance, add your email to all API requests to join the polite pool using either: - The `mailto` query parameter (e.g., `mailto=you@example.com`) - The `User-Agent` header with mailto (e.g., `User-Agent: MyApp/1.0 (mailto:you@example.com)`)  Premium users get an API key which grants higher API limits and access to special filters.
OpenAPI spec version: 1.0.0
Generated by: https://github.com/swagger-api/swagger-codegen.git.
"""

import pprint

import six


class TextMeta:
    """NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "keywords_count": "int",
        "topics_count": "int",
        "concepts_count": "int",
    }
    attribute_map = {
        "keywords_count": "keywords_count",
        "topics_count": "topics_count",
        "concepts_count": "concepts_count",
    }

    def __init__(self, keywords_count=None, topics_count=None, concepts_count=None):
        """TextMeta - a model defined in Swagger."""
        self._keywords_count = None
        self._topics_count = None
        self._concepts_count = None
        self.discriminator = None
        if keywords_count is not None:
            self.keywords_count = keywords_count
        if topics_count is not None:
            self.topics_count = topics_count
        if concepts_count is not None:
            self.concepts_count = concepts_count

    @property
    def keywords_count(self):
        """Gets the keywords_count of this TextMeta.
        :return: The keywords_count of this TextMeta.
        :rtype: int.
        """
        return self._keywords_count

    @keywords_count.setter
    def keywords_count(self, keywords_count):
        """Sets the keywords_count of this TextMeta.
        :param keywords_count: The keywords_count of this TextMeta.
        :type: int.
        """
        self._keywords_count = keywords_count

    @property
    def topics_count(self):
        """Gets the topics_count of this TextMeta.
        :return: The topics_count of this TextMeta.
        :rtype: int.
        """
        return self._topics_count

    @topics_count.setter
    def topics_count(self, topics_count):
        """Sets the topics_count of this TextMeta.
        :param topics_count: The topics_count of this TextMeta.
        :type: int.
        """
        self._topics_count = topics_count

    @property
    def concepts_count(self):
        """Gets the concepts_count of this TextMeta.
        :return: The concepts_count of this TextMeta.
        :rtype: int.
        """
        return self._concepts_count

    @concepts_count.setter
    def concepts_count(self, concepts_count):
        """Sets the concepts_count of this TextMeta.
        :param concepts_count: The concepts_count of this TextMeta.
        :type: int.
        """
        self._concepts_count = concepts_count

    def to_dict(self):
        """Returns the model properties as a dict."""
        result = {}
        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = [x.to_dict() if hasattr(x, "to_dict") else x for x in value]
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(TextMeta, dict):
            for key, value in self.items():
                result[key] = value
        return result

    def to_str(self):
        """Returns the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal."""
        if not isinstance(other, TextMeta):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal."""
        return not self == other
